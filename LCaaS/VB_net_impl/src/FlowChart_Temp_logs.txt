{
    "G1": "            _oLobBusPol = New BusinessServices.LobPF.PFPolicy\n\n            _oLobBusPol.CheckProMetrix(_oLobData)\n\n            With _oLobData.Attributes.Common\n\n                _sQtPolNum = .QuotePolicyNumber\n\n                _sQtPolTitle = .PolicyInsuredName\n\n                _sMultiState = .MultiStateInd\n\n                _sPredState = .PredominantState\n\n                _sCompanyCode = .PolicyInsuranceCompany\n\n                _sProgCode = .PolicyProgramType\n\n                _sTrxType = .PolicyTransactionType\n\n                _sUserType = .UserType\n\n                _nGrgJulEffDate = GrgJul(.PolicyEffectiveDate)\n\n                _sView = .View\n\n            End With\n\n            _elitePacExtraExpense = CheckExtraExpenseAutomaticInclusion(_sProgCode, _oLobData.Policy.Input, _oLobLoc.Input)\n\n            _elitePacTuition = CheckElitePacEducationInstitution(_sProgCode, _oLobData.Policy.Input, _oLobLoc.Input)\n\n            _elitePacActualLossSustained = CheckActualLossSustainedAutoInclusion(_sProgCode, _oLobData)\n\n            If _elitePacActualLossSustained = False Then\n\n                _bBIALSNotAllowed = _oLobBus.BIALSNotAllowedBic(_oLobLoc, _sProgCode,\n\n                                                                _sCompanyCode, _nGrgJulEffDate, _oCOData)\n\n            End If\n\n            _oLobBus.SetInitialLocAttribBic(_oLobData, _oCOData, _oLobLoc, _oLocCommon)\n\n",
    "S1": "            Dim PropertyLocationInput As LobPF.LocationInput = _oLobLoc.Input\n\n",
    "G2": "            variables(\"sClassCodeLoc\") = PropertyLocationInput.Fields(FIELD_PROPERTY_LOCATION_CLASS_CODE).Value.Trim\n\n            variables(\"sAltPowerRequired\") = PropertyLocationInput.Fields(\"PfEBAltPowerInd\").Value.Trim\n\n            variables(\"sPFElitePac2015Apply\") = _oLobData.Policy.Input.Fields(FIELD_PFELITEPAC2015APPLY).Value.Trim\n\n            variables(\"sPfBincCoinPerc\") = If(String.IsNullOrWhiteSpace(PropertyLocationInput.Fields(\"PfBincCoinPerc\").Value), GetPFBincCoinPercentage(),\n\n                                              PropertyLocationInput.Fields(\"PfBincCoinPerc\").Value.Trim())\n\n            variables(\"sPFISO2012MultiState\") = _oLobData.Policy.Input(FIELD_PFISO2012MULTISTATE).Value.Trim\n\n            variables(\"LocNum\") = _sLocNo\n\n            variables(\"BldgNum\") = _sBldgNo\n\n            variables(\"CurrentState\") = _sState\n\n            variables(\"IsThirdPartyEligible\") = IsThirdPartyChangesEligible(_oCOData.Attributes.Common.PolicyEffectiveDate, getLineOfBusiness([Property])).ToString\n\n            variables(\"IsPropertyMultiStateIso2017Enabled\") = IIf(CheckPfIso2017(_oLobLoc.StateCode, _oLobData.Attributes.Common.PolicyEffectiveDate),\n\n                                           Status.YES_ABBREVIATED, Status.NO_ABBREVIATED).ToString\n\n",
    "S2": "            Dim isACORDImpWalkthruRunning As String = String.Empty\n\n",
    "S3": "            Dim isACORDImpWalkthruPostponed As String = String.Empty\n\n",
    "S4": "            Dim isACORDImpWalkthruRequired As String = String.Empty\n\n",
    "S5": "            Dim isACORDImpPostbackValidationFailed As Boolean = False\n\n",
    "G3": "            With _ACORDImportWalkthruProperties\n\n                isACORDImpWalkthruRunning = .IsACORDImpWalkthruRunning\n\n                isACORDImpWalkthruPostponed = .IsACORDImpWalkthruPostponed\n\n                isACORDImpWalkthruRequired = .IsACORDImpWalkthruRequired\n\n                isACORDImpPostbackValidationFailed = .IsACORDImpPostbackValidationFailed\n\n            End With\n\n            With variables\n\n                .Add(IS_ACORD_IMPORT_WALKTHRU_REQUIRED, isACORDImpWalkthruRequired)\n\n                .Add(IS_ACORD_IMPORT_POSTBACK_VALIDATION_FAILED, If(isACORDImpPostbackValidationFailed, Status.YES_ABBREVIATED, Status.NO_ABBREVIATED))\n\n                .Add(IS_ACORD_IMPORT_WALKTHRU_RUNNING, isACORDImpWalkthruRunning)\n\n                .Add(IS_ACORD_IMPORT_WALKTHRU_POSTPONDED, isACORDImpWalkthruPostponed)\n\n                .Add(ACORD_IMPORT_WALKTHRU_STATUS, _ACORDImportWalkthruProperties.ACORDImpWalkthruStatus)\n\n                If (isACORDImpWalkthruRequired.CL_EqualsYesAbbreviation AndAlso isACORDImpPostbackValidationFailed.Equals(False) AndAlso\n\n                    isACORDImpWalkthruRunning.CL_EqualsNoAbbreviation AndAlso isACORDImpWalkthruPostponed.CL_EqualsNoAbbreviation) Then\n\n                    .Add(ACORD_IMPORT_WALKTHRU_START_PAGE,\n\n                         GetACORDImportWalkthruURL(_oLobData.Locations, _oCOData.StatusRecords(String.Concat(LobCO.Shared.Constants.STATUS,\n\n                                                                                                   getLineOfBusiness([Property]))).Fields(PROPERTY_ACORD_IMPORT_WALKTHRU_STATUS_LOB).Value))\n\n                End If\n\n                .Add(PROPERTY_PAGE_LEVEL_STOP_ENABLED, Status.YES_ABBREVIATED)\n\n",
    "S6": "                Dim manageThirdParty As LobCO.ThirdParty.IManageThirdParty = (New LobCO.ThirdParty.ThirdPartyFactory).GetManageThirdPartyInstance(_sQtPolNum, InstanceId)\n\n",
    "S7": "                Dim lobCode As String = getLineOfBusiness([Property])\n\n",
    "G4": "                .Add(\"lossPayeePresentOnLoad\", (manageThirdParty.GetLobThirdPartyList(getLineOfBusiness(lobCode), $\"{Request.QueryString(\"LocState\")}{Request.QueryString(\"LocNum\")}{Request.QueryString(\"BldgNum\")}\").Count() > 0).ToString())\n\n            End With\n\n            PolicyWriting.UI.Utility.RegisterClientVariableCollection(Me, CLIENT_VARIABLES, variables)\n\n",
    "S8": "            Dim businessIncomeCoinsurancePercentage As String = String.Empty\n\n",
    "G5": "            Const RATE_TYPE_ESTIMATED_LOSS_COST As String = \"4\"\n\n            Const RATE_TYPE_MANUFACTURING As String = \"5\"\n\n            With _oLobData.Policy.Input\n\n                If .Fields(\"PfBlanket\").Value.CL_EqualsYesAbbreviation() Then\n\n",
    "S9": "                    Dim rateTypes As New HashSet(Of String) From {{RATE_TYPE_ESTIMATED_LOSS_COST}, {RATE_TYPE_MANUFACTURING}}\n\n",
    "S10": "                    Dim blanketTypeList As New HashSet(Of String) From {{\"PfBlktTyp1\"}, {\"PfBlktTyp2\"}, {\"PfBlktTyp3\"}, {\"PfBlktTyp4\"}}\n\n",
    "S11": "                    Dim pfBlanketCoinsOverrideValue = (From blanketType In blanketTypeList\n\n",
    "G6": "                                                       Where String.IsNullOrWhiteSpace(.Fields(blanketType).Value).Equals(False) AndAlso\n\n                                                       rateTypes.Contains(.Fields(blanketType).Value)\n\n                                                       Select .Fields(String.Format(\"{0}{1}\", \"PfBlktCnsOvrd\", blanketType.CL_Right(1))).Value.Trim()).LastOrDefault()\n\n                    If String.IsNullOrWhiteSpace(pfBlanketCoinsOverrideValue) = False Then\n\n                        businessIncomeCoinsurancePercentage = pfBlanketCoinsOverrideValue\n\n                    End If\n\n                End If\n\n            End With\n\n            Return businessIncomeCoinsurancePercentage\n\n",
    "G7": "            With _oCOData.Attributes.Common\n\n",
    "S12": "                Dim lobCode As String = getLineOfBusiness([Property])\n\n",
    "G8": "                If (New [Shared].ApplicationShared).GetACORDImportActivePhaseTwo(lobCode, .UserId, .LocationCode) Then\n\n",
    "S13": "                    Dim LOBStatusRecord As LobCO.StatusRecord = _oCOData.StatusRecords(String.Concat(LobCO.Shared.Constants.STATUS, lobCode))\n\n",
    "S14": "                    Dim ACORDImportWalkthruPropertyParam As New ACORDImportPropertyWalkthruParams(LOBStatusRecord(PROPERTY_ACORD_IMPORT_SOURCE_LOB).Value,\n\n",
    "G9": "                                                                                                  LOBStatusRecord(PROPERTY_ACORD_IMPORT_WALKTHRU_STATUS_LOB).Value,\n\n                                                                                                  Request.QueryString(ACORD_IMPORT_WALKTHRU_RUN),\n\n                                                                                                 (IsPostBack AndAlso _oValidationResults.ErrorCount > 0),\n\n                                                                                                 .View, .PolicyTransactionType, _oLobData.Attributes,\n\n                                                                                                 ACORDImportWalkthruLoader, ACORDImportWalkthruTitle)\n\n                    _ACORDImportWalkthruProperties = ProcessACORDImportPropertyWalkthru(ACORDImportWalkthruPropertyParam)\n\n                Else\n\n                    _ACORDImportWalkthruProperties = New ACORDImportWalkthruProperties(String.Empty, String.Empty, String.Empty, String.Empty,\n\n                                                                                      False, String.Empty, False, String.Empty, False)\n\n                End If\n\n            End With\n\n",
    "G10": "            Const IS_BPP_LOB_PRESENT As String = \"BPP_Present\"\n\n            ProcessACORDImpWalkthru()\n\n            If _ACORDImportWalkthruProperties.IsSessionPreviousPageURLUpdateRequired Then\n\n                Session(CURRENT_PAGE_URL) = Session(PREVIOUS_PAGE_URL).ToString\n\n                Session.SetVariables()\n\n            End If\n\n            _oLobLoc = _oLobData.Locations.Item(_sState, _sLocNo, _sBldgNo)\n\n            If _oLobLoc Is Nothing Then\n\n                _oLobLoc = _oLobData.Locations.AddNew(_sState, _sLocNo, _sBldgNo)\n\n            End If\n\n            _oLocCommon = _oCOData.Locations.Item(_oLobLoc.LocationNumber, _oLobLoc.BuildingNumber)\n\n",
    "S15": "            Dim sEffdt As Date = StringToDate(FormatUtility.FormatDate(_oCOData.Attributes.Common.PolicyEffectiveDate, FormatUtility.DATE_FORMATS.DATE_CONTAINING_ZEROS_WITH_SLASH_AS_DELIMIT))\n\n",
    "G11": "            _bNewCopCov = _oShared2.SupportIsInEffect(COP_EFFECTIVE, sEffdt)\n\n            SetInitialValues()\n\n            LoadHelpIdData()\n\n            setLocatonLabels(_oLobData, _oLocCommon)\n\n            SetuppnlBuilding()\n\n            SetuppnlBPP()\n\n            SetuppnlBiALS()\n\n            SetupppnlBiD()\n\n            SetuppnlTu()\n\n            SetuppnlTUnoEE()\n\n            SetuppnlBI()\n\n            SetuppnlBiNoEE()\n\n            SetuppnlBiLR()\n\n            SetuppnlExExps()\n\n            SetuppnlFireLgl()\n\n            SetuppnlLglLiabPP()\n\n            SetuppnlOffPrem()\n\n            SetuppnlLaMr()\n\n            SetuppnlSpec()\n\n            SetuppnlSpoil()\n\n            SetuppnlTnts()\n\n            SetuppnlPfAddInsBldgOwn()\n\n            SetuppnlPfCondoAssoc()\n\n            SetuppnlPfCondoCmmlUnt()\n\n            SetuppnlPfLossPay()\n\n            SetDebrisRemovalAdditionalInsuranceCoverageControls()\n\n            SetSinkHoleLossCoverage()\n\n            SetupPagePresentationProMetrix()\n\n            _nvcCoveragesOnLoc = _oLobBus.GetCovsOnLoc(_oLobLoc)\n\n            dNavDict = _oLobBusShared.GetLOBNAvagation(_oCOData, _oLobData)\n\n            _bShowRateButton = dNavDict.ContainsValue(LOB_STATUS_INCOMPLETE).Equals(False)\n\n            If _oLobData.Policy.Input.Fields(PROPERTY_LOCATION_PROMETRIX_INDICATOR).Value.CL_EqualsYesAbbreviation AndAlso (_oLobData.Attributes(\"ProMetrixDowm\").CL_EqualsYesAbbreviation.Equals(False)) Then\n\n                RetrieveMessagesSetInProMetrix()\n\n            End If\n\n            setNavagationButtons()\n\n            SetODPopups()\n\n            With _oLobData\n\n                If _oLobLoc.Input.Fields(\"PFCovBppSelect\").Value.Equals(BUSINESS_PERSONAL_PROPERTY_CAUSE_OF_LOSS_BASIC) = False Then\n\n                    .Attributes(IS_BPP_LOB_PRESENT) = Boolean.FalseString\n\n                ElseIf .Attributes(IS_BPP_LOB_PRESENT).Equals(\"Present\") = False Then\n\n                    .Attributes(IS_BPP_LOB_PRESENT) = String.Empty\n\n                End If\n\n                If _oLobLoc.Input.Fields(\"PFCovLglPPSelect\").Value.Equals(BUSINESS_PERSONAL_PROPERTY_CAUSE_OF_LOSS_BASIC) = False Then\n\n                    .Attributes(\"LLBP_Present\") = Boolean.FalseString\n\n                ElseIf .Attributes(\"LLBP_Present\").Equals(\"LLBPPresent\") = False Then\n\n                    .Attributes(\"LLBP_Present\") = String.Empty\n\n                End If\n\n            End With\n\n            SetupPrefill()\n\n            RegisterJavaScriptVariables()\n\n            SetACORDImpWalkthruButtons()\n\n            _oLobData.Commit()\n\n",
    "G12": "            If Not IsPostBack Then\n\n                _prefillPresenter = New PropertyLocationInputPrefillPresenter(Me)\n\n",
    "S16": "                Dim cachedFields = _prefillPresenter.InitializeView()\n\n",
    "G13": "                Session(\"PropertyLocationPrefillFields\") = cachedFields\n\n                Session.SetVariables()\n\n            End If\n\n",
    "G14": "            If _ACORDImportWalkthruProperties.IsACORDImpWalkthruRequired.CL_EqualsYesAbbreviation AndAlso _ACORDImportWalkthruProperties.IsACORDImpWalkthruRunning.CL_EqualsYesAbbreviation Then\n 'Forcable acorimp Walkthru\n\n                btnCancel.Style.Add(STYLE_KEY_DISPLAY, STYLE_KEY_VALUE_NONE)\n\n                btnExitToDashboard.Style.Add(STYLE_KEY_DISPLAY, STYLE_KEY_VALUE_NONE)\n\n                navback.Style.Add(STYLE_KEY_DISPLAY, STYLE_KEY_VALUE_NONE)\n\n                navForward.Style.Add(STYLE_KEY_DISPLAY, STYLE_KEY_VALUE_NONE)\n\n                btnRate.Style.Add(STYLE_KEY_DISPLAY, STYLE_KEY_VALUE_NONE)\n\n                btnRate2.Style.Add(STYLE_KEY_DISPLAY, STYLE_KEY_VALUE_NONE)\n\n                quoteSummary.Enabled = False\n\n                accountInfoBar.Enabled = False\n\n                mainTabBar.Enabled = False\n\n                lobTabBar.Enabled = False\n\n                With pageHeader\n\n                    .Enabled = False\n\n                    .DisplayUtilityLinks = False\n\n                End With\n\n                btnACORDImportSaveExitWalkthru.Text = TEXT_SAVE_AND_EXIT_WALKTHRU\n\n                btnACORDImportSaveContinueWalkthru.Text = TEXT_CONTINUE_WALKTHRU\n\n                btnACORDImportCancelExitWalkthru.Text = TEXT_CANCEL_AND_EXIT_WALKTHRU\n\n                btnSubmitForReview.Visible = False\n\n                btnIssue.Visible = False\n\n            ElseIf _ACORDImportWalkthruProperties.IsACORDImpWalkthruRequired.CL_EqualsYesAbbreviation AndAlso _ACORDImportWalkthruProperties.IsACORDImpWalkthruRunning.CL_EqualsNoAbbreviation Then\n\n                btnRate.Style.Add(STYLE_KEY_DISPLAY, STYLE_KEY_VALUE_NONE)\n\n                btnRate2.Style.Add(STYLE_KEY_DISPLAY, STYLE_KEY_VALUE_NONE)\n\n                SetACORDImportWalkthroughButtons()\n\n            Else\n\n                SetACORDImportWalkthroughButtons()\n\n            End If\n\n",
    "G15": "            btnACORDImportSaveContinueWalkthru.Style.Add(STYLE_KEY_DISPLAY, STYLE_KEY_VALUE_NONE)\n\n            btnACORDImportSaveExitWalkthru.Style.Add(STYLE_KEY_DISPLAY, STYLE_KEY_VALUE_NONE)\n\n            btnACORDImportCancelExitWalkthru.Style.Add(STYLE_KEY_DISPLAY, STYLE_KEY_VALUE_NONE)\n\n",
    "G16": "            _oLobBusShared.getODPopupConditions(_oCOData)\n\n            If _oCOData.Attributes(\"ShowPFLightManuMsg\") = \"Y\" Then\n\n                notificationSection.Add(Notification.NotificationType.Informational, \"Additional information is available for this policy.  Please click on details link. <a class='ODPopupDetails' onclick='ODPopupDetails_OnClick();'>Details</a>\")\n\n            End If\n\n",
    "S17": "            Dim sKeyList As String = String.Empty\n\n",
    "G17": "            If _oCOData.Messages.Count > 0 Then\n\n                For Each oMessage As SIGI.CLAS.BusinessServices.LobCO.Message In _oCOData.Messages\n\n                    If oMessage.pageCode = \"PRINFO\" Then\n\n                        If oMessage.Fields(\"MessageType\").Value = \"C\" Then\n\n                            notificationSection.Add(Notification.NotificationType.Error, oMessage.Fields(\"MessageText\").Value.Trim)\n\n                        ElseIf oMessage.Fields(\"MessageType\").Value = \"I\" Then\n\n                            notificationSection.Add(Notification.NotificationType.Informational, oMessage.Fields(\"MessageText\").Value.Trim)\n\n                        ElseIf oMessage.Fields(\"MessageType\").Value = \"W\" Then\n\n                            notificationSection.Add(Notification.NotificationType.Warning, oMessage.Fields(\"MessageText\").Value.Trim)\n\n                        End If\n\n                        sKeyList &= oMessage.Key & \";\"\n\n                    End If\n\n                Next\n\n                _oCOData.Messages.Delete(sKeyList)\n\n                _oCOData.Commit()\n\n            End If\n\n",
    "G18": "            With pnlBLDG\n\n                .PrimaryTitleText = \"Building\"\n\n                .SecondaryTitleText = \" \"\n\n                If StringToDouble(_oLobLoc.Input.Fields(\"PFCovBldgSelect\").Value) > 0 OrElse _\n\n                                      (StringToDouble(_oLobLoc.Input.Fields(\"PfBldgLim\").Value) > 0 AndAlso _\n\n                                      String.IsNullOrWhiteSpace(_oLobLoc.Input.Fields(\"PfTntImprv\").Value.Trim)) Then\n\n                    If StringToDouble(_oLobLoc.Input.Fields(\"PfBldgLim\").Value) > 0 AndAlso _\n\n                                      String.IsNullOrWhiteSpace(_oLobLoc.Input.Fields(\"PfTntImprv\").Value.Trim) Then\n\n                        .SecondaryTitleText = GetSecondaryTitleText(\"editpnlBLDG\", \"editpnlBLDG_OnClick\", False)\n\n                    Else\n\n                        .SecondaryTitleText = GetSecondaryTitleText(\"editpnlBLDG\", \"editpnlBLDG_OnClick\", True)\n\n                    End If\n\n                    .Selected = True\n\n                    _oLobLoc.Input.Fields(\"PFCovBldgSelect\").Value = \"1\"\n\n                End If\n\n                .Visible = True\n\n                .ToolTip = \"Check if you want Building Coverage\"\n\n                .ContentType = StackingPanelItem.ContentTypes.NoContent\n\n                .OnClientClick = \"SetPanels_BuildingCoverages();pnlBuildingUnCheck();\"\n\n                .OnClientSelect = \"pnlBLDG_OnClientClick\"\n\n            End With\n\n",
    "G19": "            With pnlBPP\n\n                .PrimaryTitleText = \"Business Personal Property(BPP)\"\n\n                .SecondaryTitleText = StrSpaceOne\n\n",
    "S18": "                Dim validBppLimt As Boolean = _oLobLoc.Input.Fields(\"PfBppLim1\").Value.CL_ToDouble > 0\n\n",
    "G20": "                If _oLobLoc.Input.Fields(\"PFCovBppSelect\").Value.CL_ToDouble > 0 OrElse validBppLimt Then\n\n                    If validBppLimt Then\n\n                        .SecondaryTitleText = GetSecondaryTitleText(\"editpnlBPP\", \"editpnlBPP_OnClick\", False)\n\n                    Else\n\n                        .SecondaryTitleText = GetSecondaryTitleText(\"editpnlBPP\", \"editpnlBPP_OnClick\", True)\n\n                    End If\n\n                    .Selected = True\n\n                    _oLobLoc.Input.Fields(\"PFCovBppSelect\").Value = \"1\"\n\n                End If\n\n                .Visible = True\n\n                .ToolTip = \"Check if you want BPP Coverage\"\n\n                .ContentType = StackingPanelItem.ContentTypes.NoContent\n\n                .OnClientClick = \"SetPanels_BPPCoverages();pnlBppUnCheck();\"\n\n                .OnClientSelect = \"pnlBPP_OnClientClick\"\n\n            End With\n\n",
    "G21": "            Const EDIT_BIALS As String = \"editpnlBiALS\"\n\n            Const EDIT_BIALS_ONCLICK As String = \"editpnlBiALS_OnClick\"\n\n",
    "S19": "            Dim isBIALScompleted As Boolean = (_oLobLoc.Input.Fields(\"PfBincLim\").Value).CL_ToDouble > 0 AndAlso\n\n",
    "G22": "                                         _oLobLoc.Input.Fields(\"PfBincExclEe\").Value.Trim.Equals(BUSINESS_INCOME_ACTUAL_LOSS_SUSTAINED)\n\n            With pnlBiALS\n\n                .PrimaryTitleText = \"Business Income Actual Loss Sustained\"\n\n                .SecondaryTitleText = Space(1)\n\n                If _elitePacActualLossSustained Then\n\n                    .Selected = True\n\n                    .AllowDeselect = False\n\n                    .ToolTip = \"Automatically included in the Property Extension Coverage selected\"\n\n                    _oLobLoc.Input.Fields(\"PFCovBIAlsSelect\").Value = COVERAGE_SELECTED\n\n                    If New HashSet(Of String)() From {{LOCATION_CAUSE_OF_LOSS.BROAD_WITH_EQ.GetHashCode.ToString},\n\n                                                      {LOCATION_CAUSE_OF_LOSS.BASIC_WITH_EQ.GetHashCode.ToString},\n\n                                                      {LOCATION_CAUSE_OF_LOSS.SPECIAL_WITH_EQ.GetHashCode.ToString}}.Contains(_oLobLoc.Input(\"PfLocCol\").Value.Trim) AndAlso\n\n                      String.IsNullOrWhiteSpace(_oLobLoc.Input(\"PfBincEqLim\").Value) Then\n\n                        .SecondaryTitleText = GetSecondaryTitleText(\"editpnlBiALS\", \"editpnlBiALS_OnClick\", True)\n\n                        notificationSection.Add(Notification.NotificationType.Warning, \"Please update all required information for Business Income Actual Loss Sustained coverage.\")\n\n                    ElseIf String.IsNullOrWhiteSpace(_oLobLoc.Input(\"PfBincCvlNoMiles\").Value) Then\n\n                        .SecondaryTitleText = GetSecondaryTitleText(\"editpnlBiALS\", \"editpnlBiALS_OnClick\", False)\n\n                        SetActualLossSustainedPolicyRecords(_oLobData, _oCOData.Policy.Fields(\"CpProgram\").Value.Trim)\n\n                        SetActualLossSustainedLocationRecords(_oLobLoc, _oLobData.Attributes)\n\n                    Else\n\n                        .SecondaryTitleText = GetSecondaryTitleText(\"editpnlBiALS\", \"editpnlBiALS_OnClick\", False)\n\n                    End If\n\n                    If _ACORDImportWalkthruProperties.IsACORDImpWalkthruRequired.CL_EqualsYesAbbreviation AndAlso\n\n                       _ACORDImportWalkthruProperties.IsACORDImpWalkthruRunning.CL_EqualsYesAbbreviation Then\n\n                        _oLobLoc.Input.Fields(FIELD_PFCOVBIEESELECT).Value = String.Empty\n\n                    End If\n\n                Else\n\n                    If _oLobLoc.Input.Fields(BIALS_COVERAGE).Value.Trim.Equals(COVERAGE_SELECTED, StringComparison.CurrentCultureIgnoreCase) OrElse isBIALScompleted Then\n\n                        If isBIALScompleted Then\n\n                            .SecondaryTitleText = GetSecondaryTitleText(EDIT_BIALS, EDIT_BIALS_ONCLICK, False)\n\n                        Else\n\n                            .SecondaryTitleText = GetSecondaryTitleText(EDIT_BIALS, EDIT_BIALS_ONCLICK, True)\n\n                        End If\n\n                        .Selected = True\n\n                        _oLobLoc.Input.Fields(BIALS_COVERAGE).Value = COVERAGE_SELECTED\n\n                    ElseIf _bBIALSNotAllowed.Equals(True) Then\n\n                        pnlBiALS.Selected = False\n\n                        pnlBiALS.Available = False\n\n                        If _bBIALSNotAllowed = True Then\n\n                            pnlBiALS.DisabledMessage = \"BIALS is not available for date/state/program/company combination\"\n\n                            .InitialClientVisibility = False\n\n                        End If\n\n                    End If\n\n                    If _bBIALSNotAllowedVac = True Then\n\n                        pnlBiALS.Selected = False\n\n                        pnlBiALS.Available = False\n\n                        pnlBiALS.DisabledMessage = \"Business Income coverage not valid for vacant buildings\"\n\n                    End If\n\n                    .Visible = True\n\n                    .ToolTip = \"Check if you want Business Income Actual Loss Sustained Coverage\"\n\n                End If\n\n                .ContentType = StackingPanelItem.ContentTypes.NoContent\n\n                .OnClientClick = \"SetPanels_BICoverages();\"\n\n                .OnClientSelect = \"pnlBiALS_OnClientClick\"\n\n            End With\n\n",
    "S20": "            Dim coverageBIDPLimit As String = \"PfBincLim\"\n\n",
    "S21": "            Dim coverageBIDPExcelEe As String = \"PfBincExclEe\"\n\n",
    "G23": "            If _oLobData.Policy.Input.Fields(\"PFElitePac2015Apply\").Value.CL_EqualsYesAbbreviation Then\n\n                coverageBIDPLimit = \"PfBIDPBincLim\"\n\n                coverageBIDPExcelEe = \"PfBIDPBincExclEe\"\n\n            End If\n\n            With pnlBiD\n\n                .PrimaryTitleText = \"Business Income From Dependent Properties\"\n\n                .SecondaryTitleText = Space(1)\n\n                If _oLobLoc.Input.Fields(\"PFCovBIDpSelect\").Value.Trim.Equals(COVERAGE_SELECTED) OrElse\n\n                                       (_oLobLoc.Input.Fields(coverageBIDPLimit).Value.CL_ToDouble > 0 AndAlso\n\n                                       _oLobLoc.Input.Fields(coverageBIDPExcelEe).Value.Trim.Equals(BUSINESS_INCOME_DEPANDANT_PROPERTIES)) Then\n\n                    If _oLobLoc.Input.Fields(coverageBIDPLimit).Value.CL_ToDouble > 0 AndAlso\n\n                                      _oLobLoc.Input.Fields(coverageBIDPExcelEe).Value.Trim.Equals(BUSINESS_INCOME_DEPANDANT_PROPERTIES) Then\n\n                        .SecondaryTitleText = GetSecondaryTitleText(\"editpnlBiD\", \"editpnlBiD_OnClick\", False)\n\n                    Else\n\n                        .SecondaryTitleText = GetSecondaryTitleText(\"editpnlBiD\", \"editpnlBiD_OnClick\", True)\n\n                    End If\n\n                    .Selected = True\n\n                    _oLobLoc.Input.Fields(\"PFCovBIDpSelect\").Value = COVERAGE_SELECTED\n\n                End If\n\n                If _bBIALSNotAllowedVac AndAlso _oLobData.Policy.Input.Fields(\"PFElitePac2015Apply\").Value.CL_EqualsYesAbbreviation = False Then\n\n                    pnlBiD.Selected = False\n\n                    pnlBiD.Available = False\n\n                    pnlBiD.DisabledMessage = \"Business Income coverage not valid for vacant buildings\"\n\n                End If\n\n                .Visible = True\n\n                .ToolTip = \"Check if you want Business Income From Dependent Properties.\"\n\n                .ContentType = StackingPanelItem.ContentTypes.NoContent\n\n                .OnClientClick = \"SetPanels_BICoverages();\"\n\n                .OnClientSelect = \"pnlBiD_OnClientClick\"\n\n            End With\n\n",
    "G24": "            With pnlTu\n\n                .PrimaryTitleText = \"Business Income - Educational Institution\"\n\n                .SecondaryTitleText = Space(1)\n\n                If _elitePacTuition Then\n\n                    .Selected = True\n\n                    .AllowDeselect = False\n\n                    .ToolTip = TUITION_TOOLTIP_MESSAGE\n\n                    _oLobLoc.Input.Fields(\"PFCovTuSelect\").Value = COVERAGE_SELECTED\n\n",
    "S22": "                    Dim isTuitionLimitApplicable = String.IsNullOrWhiteSpace(_oLobLoc.Input.Fields(\"PfTuitLimit\").Value) AndAlso\n\n",
    "G25": "                        String.IsNullOrWhiteSpace(_oLobLoc.Input(\"PfTuitBlktId\").Value)\n\n                    If New HashSet(Of String)() From {{LOCATION_CAUSE_OF_LOSS.BASIC_WITH_EQ.GetHashCode.ToString},\n\n                                                      {LOCATION_CAUSE_OF_LOSS.BROAD_WITH_EQ.GetHashCode.ToString},\n\n                                                      {LOCATION_CAUSE_OF_LOSS.SPECIAL_WITH_EQ.GetHashCode.ToString}}.Contains(_oLobLoc.Input(\"PfLocCol\").Value.Trim) AndAlso\n\n                                                String.IsNullOrWhiteSpace(_oLobLoc.Input.Fields(\"PfTuitEqLim\").Value) Then\n\n                        .SecondaryTitleText = GetSecondaryTitleText(\"editpnlTu\", \"editpnlTu_OnClick\", True)\n\n                        notificationSection.Add(Notification.NotificationType.Warning, \"Please update all required information for Business Income - Educational Institution coverage.\")\n\n                    ElseIf isTuitionLimitApplicable Then\n\n                        .SecondaryTitleText = GetSecondaryTitleText(\"editpnlTu\", \"editpnlTu_OnClick\", False)\n\n                        SetTuitionRecords(_oLobData, _oLobLoc.Input)\n\n                    Else\n\n                        .SecondaryTitleText = GetSecondaryTitleText(\"editpnlTu\", \"editpnlTu_OnClick\", False)\n\n                    End If\n\n                Else\n\n                    If _oLobLoc.Input.Fields(\"PFCovTuSelect\").Value.CL_ToDouble > 0 OrElse\n\n                                        (_oLobLoc.Input.Fields(\"PfTuitClassCd\").Value.CL_ToDouble > 0 AndAlso\n\n                       _oLobLoc.Input.Fields(\"PfTuitExclEe\").Value.Trim.CL_EqualsYesAbbreviation = False) Then\n\n                        If (_oLobLoc.Input.Fields(\"PfTuitClassCd\").Value.CL_ToDouble > 0 AndAlso\n\n                        _oLobLoc.Input.Fields(\"PfTuitExclEe\").Value.Trim.CL_EqualsYesAbbreviation = False) Then\n\n                            .SecondaryTitleText = GetSecondaryTitleText(\"editpnlTu\", \"editpnlTu_OnClick\", False)\n\n                        Else\n\n                            .SecondaryTitleText = GetSecondaryTitleText(\"editpnlTu\", \"editpnlTu_OnClick\", True)\n\n                        End If\n\n                        .Selected = True\n\n                        _oLobLoc.Input.Fields(\"PFCovTuSelect\").Value = COVERAGE_SELECTED\n\n                    End If\n\n                    If _bTuitNotAllowedVac Then\n\n                        pnlTu.Selected = False\n\n                        pnlTu.Available = False\n\n                        pnlTu.DisabledMessage = \"Business Income - Educational Institution coverage not valid for vacant buildings\"\n\n                    End If\n\n                    .Visible = True\n\n                    .ToolTip = \"Check if you want Business Income - Educational Institution.\"\n\n                    .ContentType = StackingPanelItem.ContentTypes.NoContent\n\n                End If\n\n                .OnClientClick = \"SetPanels_TUCoverages();\"\n\n                .OnClientSelect = \"pnlTu_OnClientClick\"\n\n            End With\n\n",
    "G26": "            With pnlTUnoEE\n\n                .PrimaryTitleText = \"Business Income - Educational Institution w/o Extra Expense\"\n\n                .SecondaryTitleText = \" \"\n\n                If StringToDouble(_oLobLoc.Input.Fields(\"PFCovTUnoEESelect\").Value) > 0 OrElse _\n\n                                     (StringToDouble(_oLobLoc.Input.Fields(\"PfTuitClassCd\").Value) > 0 AndAlso _\n\n                                     _oLobLoc.Input.Fields(\"PfTuitExclEe\").Value.Trim = \"Y\") Then\n\n                    If (StringToDouble(_oLobLoc.Input.Fields(\"PfTuitClassCd\").Value) > 0 AndAlso _\n\n                                   _oLobLoc.Input.Fields(\"PfTuitExclEe\").Value.Trim = \"Y\") Then\n\n                        .SecondaryTitleText = GetSecondaryTitleText(\"editpnlTUnoEE\", \"editpnlTUnoEE_OnClick\", False)\n\n                    Else\n\n                        .SecondaryTitleText = GetSecondaryTitleText(\"editpnlTUnoEE\", \"editpnlTUnoEE_OnClick\", True)\n\n                    End If\n\n                    .Selected = True\n\n                    _oLobLoc.Input.Fields(\"PFCovTUnoEESelect\").Value = \"1\"\n\n                End If\n\n                If _bTuitNotAllowedVac = True Then\n\n                    pnlTUnoEE.Selected = False\n\n                    pnlTUnoEE.Available = False\n\n                    pnlTUnoEE.DisabledMessage = \"Business Income - Educational Institution w/o Extra Expense coverage not valid for vacant buildings\"\n\n                End If\n\n                .Visible = True\n\n                .ToolTip = \"Check if you want Business Income - Educational Institution w/o Extra Expense.\"\n\n                .ContentType = StackingPanelItem.ContentTypes.NoContent\n\n                .OnClientClick = \"SetPanels_TUCoverages();\"\n\n                .OnClientSelect = \"pnlTUnoEE_OnClientClick\"\n\n            End With\n\n",
    "S23": "            Dim businessIncomeLimit As Double = If(_oLobLoc.Input.Fields(\"PfBincLim\").Value.CL_ToDouble > 0, _oLobLoc.Input.Fields(\"PfBincLim\").Value.CL_ToDouble, _oLobLoc.Input.Fields(\"PfBincLim45\").Value.CL_ToDouble)\n\n",
    "S24": "            Dim exposureLimit As Double = _oLobLoc.Input.Fields(\"PfBincExpoOne\").Value.CL_ToDouble + _oLobLoc.Input.Fields(\"PfBincExpoTwo\").Value.CL_ToDouble\n\n",
    "S25": "            Dim businessIncomeLimitExists As Boolean = (businessIncomeLimit + exposureLimit) > 0\n\n",
    "S26": "            Dim extraExpenseIndicator As Boolean = _oLobLoc.Input.Fields(\"PfBincExclEe\").Value.Trim.Equals(BUSINESS_INCOME_EXTRA_EXPENSE)\n\n",
    "G27": "            With pnlBI\n\n                .PrimaryTitleText = \"Business Income with Extra Expense\"\n\n                .SecondaryTitleText = Space(1)\n\n                If _elitePacExtraExpense Then\n\n                    .Selected = True\n\n                    .AllowDeselect = False\n\n                    .ToolTip = \"When the Senior Living Property Extension Coverage is selected, a $250,000 BI-Extra Expense limit is automatically included for each location and can be increased by location\"\n\n                    .SecondaryTitleText = GetSecondaryTitleText(\"editpnlBI\", \"editpnlBI_OnClick\", False)\n\n                    _oLobLoc.Input.Fields(\"PFCovBIEESelect\").Value = COVERAGE_SELECTED.Trim\n\n                    If New HashSet(Of String)() From {{LOCATION_CAUSE_OF_LOSS.BROAD_WITH_EQ.GetHashCode.ToString},\n\n                                                      {LOCATION_CAUSE_OF_LOSS.BASIC_WITH_EQ.GetHashCode.ToString},\n\n                                                      {LOCATION_CAUSE_OF_LOSS.SPECIAL_WITH_EQ.GetHashCode.ToString}}.Contains(_oLobLoc.Input(\"PfLocCol\").Value.Trim) AndAlso\n\n                        String.IsNullOrWhiteSpace(_oLobLoc.Input.Fields(\"PfBincEqLim\").Value) Then\n\n                        .SecondaryTitleText = GetSecondaryTitleText(\"editpnlBI\", \"editpnlBI_OnClick\", True)\n\n                        notificationSection.Add(Notification.NotificationType.Warning, \"Please update all required information for Business Income with Extra Expense coverage.\")\n\n                    ElseIf String.IsNullOrWhiteSpace(_oLobLoc.Input.Fields(\"PfBincLim45\").Value) Then\n\n                        .SecondaryTitleText = GetSecondaryTitleText(\"editpnlBI\", \"editpnlBI_OnClick\", False)\n\n                        SetExtraExpenseRecords(_oLobData, _oLobLoc)\n\n                    ElseIf String.IsNullOrWhiteSpace(_oLobLoc.Input.Fields(\"PfBincLim45\").Value) = False Then\n\n                        .SecondaryTitleText = GetSecondaryTitleText(\"editpnlBI\", \"editpnlBI_OnClick\", False)\n\n                    End If\n\n                    If _ACORDImportWalkthruProperties.IsACORDImpWalkthruRequired.CL_EqualsYesAbbreviation AndAlso\n\n                      _ACORDImportWalkthruProperties.IsACORDImpWalkthruRunning.CL_EqualsYesAbbreviation Then\n\n                        _oLobLoc.Input.Fields(BIALS_COVERAGE).Value = String.Empty\n\n                    End If\n\n                Else\n\n                    If StringToDouble(_oLobLoc.Input.Fields(\"PFCovBIEESelect\").Value) > 0 OrElse extraExpenseIndicator AndAlso businessIncomeLimitExists Then\n\n                        If extraExpenseIndicator AndAlso businessIncomeLimitExists Then\n\n                            .SecondaryTitleText = GetSecondaryTitleText(\"editpnlBI\", \"editpnlBI_OnClick\", False)\n\n                        Else\n\n                            .SecondaryTitleText = GetSecondaryTitleText(\"editpnlBI\", \"editpnlBI_OnClick\", True)\n\n                        End If\n\n                        .Selected = True\n\n                        _oLobLoc.Input.Fields(\"PFCovBIEESelect\").Value = COVERAGE_SELECTED.Trim\n\n                        .ToolTip = \"Check if you want Business Income with Extra Expense\"\n\n                    End If\n\n                    If _bBIALSNotAllowedVac Then\n\n                        pnlBI.Selected = False\n\n                        pnlBI.Available = False\n\n                        pnlBI.DisabledMessage = \"Business Income coverage not valid for vacant buildings\"\n\n                    End If\n\n                    SetCommercialOutputProgramExtraExpense()\n\n                    .Visible = True\n\n                    .ToolTip = \"Check if you want Business Income with Extra Expense\"\n\n                    .ContentType = StackingPanelItem.ContentTypes.NoContent\n\n                    .OnClientClick = \"SetPanels_BICoverages();\"\n\n                    .OnClientSelect = \"pnlBI_OnClientClick\"\n\n                End If\n\n            End With\n\n",
    "G28": "            With pnlBI\n\n",
    "S27": "                Dim businessIncomeLimit As Double = _oLobLoc.Input.Fields(\"PfBincLim\").Value.CL_ToDouble\n\n",
    "S28": "                Dim assistedLivingProgramCode As Boolean = _oCOData.Attributes.Common.PolicyProgramType.Equals(getProgramCode(AssistedLivingFacilities))\n\n",
    "G29": "                If assistedLivingProgramCode AndAlso _oLobLoc.Input.Fields(FIELD_PFBINCLIM45).Value.CL_ToDouble.Equals(EXTRA_EXPENSE_LIMIT) Then\nbusinessIncomeLimit =\n\n                    _oLobLoc.Input.Fields(FIELD_PFBINCLIM45).Value.CL_ToDouble()\n\n\n End If\n\n                If _oLobData.Policy.Input.Fields(FIELD_PFELITEPAC2015APPLY).Value.CL_EqualsYesAbbreviation.Equals(False) AndAlso _bNewCopCov AndAlso\n\n                    (assistedLivingProgramCode OrElse _oCOData.Attributes.Common.PolicySIC.Equals(SIC_CODE_ASSISTED_LIVING_FACILITIES)) Then\n\n                    If (businessIncomeLimit + _oLobLoc.Input.Fields(\"PfBincExpoOne\").Value.CL_ToDouble + _oLobLoc.Input.Fields(\"PfBincExpoTwo\").Value.CL_ToDouble > 0 AndAlso\n\n                                        _oLobLoc.Input.Fields(\"PfBincExclEe\").Value.Trim.Equals(BUSINESS_INCOME_EXTRA_EXPENSE)) Then\n\n                        .SecondaryTitleText = GetSecondaryTitleText(EXTRA_EXPENSE_EDIT_PANEL, EXTRA_EXPENSE_ONCLICK_EDIT_PANEL, False)\n\n                    Else\n\n                        .SecondaryTitleText = GetSecondaryTitleText(EXTRA_EXPENSE_EDIT_PANEL, EXTRA_EXPENSE_ONCLICK_EDIT_PANEL, True)\n\n                    End If\n\n                    .Selected = True\n\n                End If\n\n            End With\n\n",
    "G30": "            With pnlBiNoEE\n\n                .PrimaryTitleText = \"Business Income without Extra Expense\"\n\n                .SecondaryTitleText = \" \"\n\n                If StringToDouble(_oLobLoc.Input.Fields(\"PFCovBINoEESelect\").Value) > 0 OrElse _\n\n                (_oLobLoc.Input.Fields(\"PfBincLim\").ValComOut + _oLobLoc.Input.Fields(\"PfBincExpoOne\").ValComOut + _oLobLoc.Input.Fields(\"PfBincExpoTwo\").ValComOut > 0 AndAlso _\n\n                _oLobLoc.Input.Fields(\"PfBincExclEe\").Value.Trim = \"Y\") Then\n\n                    If (_oLobLoc.Input.Fields(\"PfBincLim\").ValComOut + _oLobLoc.Input.Fields(\"PfBincExpoOne\").ValComOut + _oLobLoc.Input.Fields(\"PfBincExpoTwo\").ValComOut > 0 AndAlso _\n\n                        _oLobLoc.Input.Fields(\"PfBincExclEe\").Value.Trim = \"Y\") Then\n\n                        .SecondaryTitleText = GetSecondaryTitleText(\"editpnlBiNoEE\", \"editpnlBiNoEE_OnClick\", False)\n\n                    Else\n\n                        .SecondaryTitleText = GetSecondaryTitleText(\"editpnlBiNoEE\", \"editpnlBiNoEE_OnClick\", True)\n\n                    End If\n\n                    .Selected = True\n\n                    _oLobLoc.Input.Fields(\"PFCovBINoEESelect\").Value = \"1\"\n\n                End If\n\n                If _bBIALSNotAllowedVac = True Then\n\n                    pnlBiNoEE.Selected = False\n\n                    pnlBiNoEE.Available = False\n\n                    pnlBiNoEE.DisabledMessage = \"Business Income coverage not valid for vacant buildings\"\n\n                End If\n\n                .Visible = True\n\n                .ToolTip = \"Check if you want Business Income without Extra Expense.\"\n\n                .ContentType = StackingPanelItem.ContentTypes.NoContent\n\n                .OnClientClick = \"SetPanels_BICoverages();\"\n\n                .OnClientSelect = \"pnlBiNoEE_OnClientClick\"\n\n            End With\n\n",
    "G31": "            With pnlBiLR\n\n                .PrimaryTitleText = \"Business Income - Landlord as Additional Insured (Rental Value)\"\n\n                .SecondaryTitleText = \" \"\n\n                If StringToDouble(_oLobLoc.Input.Fields(\"PFCovBiLRSelect\").Value) > 0 OrElse _\n\n                                      String.IsNullOrWhiteSpace(_oLobLoc.Input.Fields(\"PfLnldLim\").Value.Trim) = False Then\n\n                    If String.IsNullOrWhiteSpace(_oLobLoc.Input.Fields(\"PfLnldLim\").Value.Trim) = False Then\n\n                        .SecondaryTitleText = GetSecondaryTitleText(\"editpnlBiLR\", \"editpnlBiLR_OnClick\", False)\n\n                    Else\n\n                        .SecondaryTitleText = GetSecondaryTitleText(\"editpnlBiLR\", \"editpnlBiLR_OnClick\", True)\n\n                    End If\n\n                    .Selected = True\n\n                    _oLobLoc.Input.Fields(\"PFCovBiLRSelect\").Value = \"1\"\n\n                End If\n\n                .Visible = True\n\n                .ToolTip = \"Check if you want Business Income - Landlord as Additional Insured (Rental Value)\"\n\n                .ContentType = StackingPanelItem.ContentTypes.NoContent\n\n                .OnClientSelect = \"pnlBiLR_OnClientClick\"\n\n            End With\n\n",
    "S29": "            Dim extraExpenseLimit As Double = _oLobLoc.Input.Fields(\"PfExxpLim\").Value.CL_ToDouble\n\n",
    "G32": "            Const EDIT_PANEL_EXTRA_EXPENSE As String = \"editpnlExExps\"\n\n            Const EDIT_PANEL_EXTRA_EXPENSE_ONCLICK As String = \"editpnlExExps_OnClick\"\n\n            With pnlExExps\n\n                .PrimaryTitleText = \"Extra Expense Only\"\n\n                .SecondaryTitleText = Space(1)\n\n                If _oLobLoc.Input.Fields(FIELD_PFCOVEXEXPSSELECT).Value.CL_ToDouble > 0 OrElse\n\n                                     extraExpenseLimit > 0 Then\n\n                    If extraExpenseLimit > 0 Then\n\n                        .SecondaryTitleText = GetSecondaryTitleText(EDIT_PANEL_EXTRA_EXPENSE, EDIT_PANEL_EXTRA_EXPENSE_ONCLICK, False)\n\n                    Else\n\n                        .SecondaryTitleText = GetSecondaryTitleText(EDIT_PANEL_EXTRA_EXPENSE, EDIT_PANEL_EXTRA_EXPENSE_ONCLICK, True)\n\n                    End If\n\n                    .Selected = True\n\n                    _oLobLoc.Input.Fields(FIELD_PFCOVEXEXPSSELECT).Value = \"1\"\n\n                End If\n\n                If _bExtExpNotAllowedVac Then\n\n                    pnlExExps.Selected = False\n\n                    pnlExExps.Available = False\n\n                    pnlExExps.DisabledMessage = \"Extra Expense Only coverage not valid for vacant buildings\"\n\n                End If\n\n                .Visible = True\n\n                .ToolTip = \"Check if you want Extra Expense Only\"\n\n                .ContentType = StackingPanelItem.ContentTypes.NoContent\n\n                .OnClientSelect = \"pnlExExps_OnClientClick\"\n\n                If CheckPfIso2017(_oLobLoc.StateCode, _oLobData.Attributes.Common.PolicyEffectiveDate) Then\n\n                    .OnClientClick = \"SetPanels_BICoverages();\"\n\n                End If\n\n            End With\n\n",
    "G33": "            With pnlFireLgl\n\n                .PrimaryTitleText = COVERAGE_TYPE_LEGAL_LIABILITY_BUILDING_DESCRIPTION\n\n                .SecondaryTitleText = String.Empty\n\n                If _oLobData.Policy.Input(FIELD_PFISO2012MULTISTATE).Value.CL_EqualsNoAbbreviation() Then\n\n                    If (_oLobLoc.Input.Fields(\"PFCovFireLglSelect\").Value.CL_ToDouble) > 0 OrElse\n\n                                           ((_oLobLoc.Input.Fields(\"PfBldgLim\").Value.CL_ToDouble) > 0 AndAlso\n\n                                           _oLobLoc.Input.Fields(\"PfTntImprv\").Value.Trim.Equals(FIRE_COVERAGE)) Then\n\n                        If ((_oLobLoc.Input.Fields(\"PfBldgLim\").Value.CL_ToDouble) > 0 AndAlso\n\n                                            _oLobLoc.Input.Fields(\"PfTntImprv\").Value.Trim.Equals(FIRE_COVERAGE)) Then\n\n                            .SecondaryTitleText = GetSecondaryTitleText(\"editpnlFireLgl\", \"editpnlFireLgl_OnClick\", False)\n\n                        Else\n\n                            .SecondaryTitleText = GetSecondaryTitleText(\"editpnlFireLgl\", \"editpnlFireLgl_OnClick\", True)\n\n                        End If\n\n                        .Selected = True\n\n                        _oLobLoc.Input.Fields(\"PFCovFireLglSelect\").Value = DEFAULT_VALUE_1\n\n                    Else\n\n                        .SecondaryTitleText = GetSecondaryTitleText(\"editpnlFireLgl\", \"editpnlFireLgl_OnClick\", False)\n\n                    End If\n\n                Else\n\n                    If (_oLobLoc.Input.Fields(\"PFCovFireLglSelect\").Value.CL_ToDouble) > 0 OrElse\n\n                                           (_oLobLoc.Input.Fields(\"PfLLBldgLim\").Value.CL_ToDouble) > 0 Then\n\n                        If (_oLobLoc.Input.Fields(\"PfLLBldgLim\").Value.CL_ToDouble) > 0 Then\n\n                            .SecondaryTitleText = GetSecondaryTitleText(\"editpnlFireLgl\", \"editpnlFireLgl_OnClick\", False)\n\n                        Else\n\n                            .SecondaryTitleText = GetSecondaryTitleText(\"editpnlFireLgl\", \"editpnlFireLgl_OnClick\", True)\n\n                        End If\n\n                        .Selected = True\n\n                        _oLobLoc.Input.Fields(\"PFCovFireLglSelect\").Value = DEFAULT_VALUE_1\n\n                    Else\n\n                        .SecondaryTitleText = GetSecondaryTitleText(\"editpnlFireLgl\", \"editpnlFireLgl_OnClick\", False)\n\n                    End If\n\n                End If\n\n                .Visible = True\n\n                .ToolTip = \"Check if you want Legal Liability - Building.\"\n\n                .ContentType = StackingPanelItem.ContentTypes.NoContent\n\n                .OnClientClick = \"SetPanels_BuildingCoverages();\"\n\n                .OnClientSelect = \"pnlFireLgl_OnClientClick\"\n\n            End With\n\n",
    "G34": "            With pnlLglLiabPP\n\n                .PrimaryTitleText = COVERAGE_TYPE_LEGAL_LIABILITY_PERSONAL_PROPERTY_DESCRIPTION\n\n                .SecondaryTitleText = String.Empty\n\n                .Visible = False\n\n                If StringToDouble(_oLobLoc.Input.Fields(\"PFCovLglPPSelect\").Value) > 0 OrElse\n\n                                           StringToDouble(_oLobLoc.Input.Fields(\"PfLLBppLim\").Value) > 0 Then\n\n                    If StringToDouble(_oLobLoc.Input.Fields(\"PfLLBppLim\").Value) > 0 Then\n\n                        .SecondaryTitleText = GetSecondaryTitleText(\"editpnlLglLiabPP\", \"editpnlLglLiabPP_OnClick\", False)\n\n                    Else\n\n                        .SecondaryTitleText = GetSecondaryTitleText(\"editpnlLglLiabPP\", \"editpnlLglLiabPP_OnClick\", True)\n\n                    End If\n\n                    .Selected = True\n\n                    _oLobLoc.Input.Fields(\"PFCovLglPPSelect\").Value = DEFAULT_VALUE_1\n\n                Else\n\n                    .SecondaryTitleText = GetSecondaryTitleText(\"editpnlLglLiabPP\", \"editpnlLglLiabPP_OnClick\", False)\n\n                End If\n\n                If _oLobData.Policy.Input(FIELD_PFISO2012MULTISTATE).Value.CL_EqualsYesAbbreviation() Then\n\n                    .Visible = True\n\n                End If\n\n                .ToolTip = \"Check if you want Legal Liability - Personal Property.\"\n\n                .ContentType = StackingPanelItem.ContentTypes.NoContent\n\n                .OnClientSelect = \"pnlLglLiabPP_OnClientClick\"\n\n            End With\n\n",
    "G35": "            With pnlOffPrem\n\n                .PrimaryTitleText = \"Off Premises Utilities\"\n\n                .SecondaryTitleText = \" \"\n\n",
    "S30": "                Dim sOffPrCovgs As String = String.Empty\n\n",
    "G36": "                sOffPrCovgs = String.Concat(\"*\", _oLobLoc.Input.Fields(\"PfOfprCovBldg\").Value, \"*\", _oLobLoc.Input.Fields(\"PfOfprCovBpp\").Value, \"*\", _oLobLoc.Input.Fields(\"PfOfprCovTe\").Value).Trim\n\n                If StringToDouble(_oLobLoc.Input.Fields(\"PFCovOffPremSelect\").Value) > 0 OrElse _\n\n               (StringToDouble(_oLobLoc.Input.Fields(\"PfOfprCol\").Value) > 0 AndAlso _\n\n               (sOffPrCovgs.Contains(\"Y\") OrElse _\n\n                String.IsNullOrWhiteSpace(_oLobLoc.Input.Fields(\"PfOfprCovType\").Value.Trim) = False)) Then\n\n                    If (StringToDouble(_oLobLoc.Input.Fields(\"PfOfprCol\").Value) > 0 AndAlso _\n\n                    (sOffPrCovgs.Contains(\"Y\") OrElse _\n\n                    String.IsNullOrWhiteSpace(_oLobLoc.Input.Fields(\"PfOfprCovType\").Value.Trim) = False)) Then\n\n                        .SecondaryTitleText = GetSecondaryTitleText(\"editpnlOffPrem\", \"editpnlOffPrem_OnClick\", False)\n\n                    Else\n\n                        .SecondaryTitleText = GetSecondaryTitleText(\"editpnlOffPrem\", \"editpnlOffPrem_OnClick\", True)\n\n                    End If\n\n                    .Selected = True\n\n                    _oLobLoc.Input.Fields(\"PFCovOffPremSelect\").Value = \"1\"\n\n                End If\n\n                If _bNewCopCov AndAlso (_oCOData.Attributes.Common.PolicyProgramType = \"45\" OrElse _oCOData.Attributes.Common.PolicySIC = \"836150\") Then\n\n                    .Visible = True\n\n                End If\n\n                .Visible = True\n\n                .ToolTip = \"Check if you want Off Premises Utilities\"\n\n                .ContentType = StackingPanelItem.ContentTypes.NoContent\n\n                .OnClientSelect = \"pnlOffPrem_OnClientClick\"\n\n            End With\n\n",
    "G37": "            With pnlLaMr\n\n                .PrimaryTitleText = \"Loss Assessment/Misc Real Property\"\n\n                .SecondaryTitleText = \" \"\n\n                If StringToDouble(_oLobLoc.Input.Fields(\"PFCovLaMrSelect\").Value) > 0 OrElse _\n\n                                 (StringToDouble(_oLobLoc.Input.Fields(\"PfLossLimit\").Value) > 0 OrElse _\n\n                                 StringToDouble(_oLobLoc.Input.Fields(\"PfMiscRealLim\").Value) > 0) Then\n\n                    If (StringToDouble(_oLobLoc.Input.Fields(\"PfLossLimit\").Value) > 0 OrElse _\n\n                                    StringToDouble(_oLobLoc.Input.Fields(\"PfMiscRealLim\").Value) > 0) Then\n\n                        .SecondaryTitleText = GetSecondaryTitleText(\"editpnlLaMr\", \"editpnlLaMr_OnClick\", False)\n\n                    Else\n\n                        .SecondaryTitleText = GetSecondaryTitleText(\"editpnlLaMr\", \"editpnlLaMr_OnClick\", True)\n\n                    End If\n\n                    .Selected = True\n\n                    _oLobLoc.Input.Fields(\"PFCovLaMrSelect\").Value = \"1\"\n\n                End If\n\n                .Visible = True\n\n                .ToolTip = \"Check if you want Loss Assessment/Misc Real Property\"\n\n                .ContentType = StackingPanelItem.ContentTypes.NoContent\n\n                .OnClientSelect = \"pnlLaMr_OnClientClick\"\n\n            End With\n\n",
    "G38": "            With pnlSpec\n\n                .PrimaryTitleText = \"Special Classes\"\n\n                .SecondaryTitleText = \" \"\n\n                If StringToDouble(_oLobLoc.Input.Fields(\"PFCovSpecSelect\").Value) > 0 Or _\n\n                                    String.IsNullOrWhiteSpace(_oLobLoc.Input.Fields(\"PfIoCovgList\").Value.Trim) = False Then\n\n                    If String.IsNullOrWhiteSpace(_oLobLoc.Input.Fields(\"PfIoCovgList\").Value.Trim) = False Then\n\n                        .SecondaryTitleText = GetSecondaryTitleText(\"editpnlSpec\", \"editpnlSpec_OnClick\", False)\n\n                    Else\n\n                        .SecondaryTitleText = GetSecondaryTitleText(\"editpnlSpec\", \"editpnlSpec_OnClick\", True)\n\n                    End If\n\n                    .Selected = True\n\n                    _oLobLoc.Input.Fields(\"PFCovSpecSelect\").Value = \"1\"\n\n                End If\n\n                .Visible = True\n\n                .ToolTip = \"Check if you want Special Classes.\"\n\n                .ContentType = StackingPanelItem.ContentTypes.NoContent\n\n                .OnClientSelect = \"pnlSpec_OnClientClick\"\n\n            End With\n\n",
    "G39": "            With pnlSpoil\n\n                .PrimaryTitleText = \"Spoilage\"\n\n                .SecondaryTitleText = \" \"\n\n                If StringToDouble(_oLobLoc.Input.Fields(\"PFCovSpoilSelect\").Value) > 0 OrElse _\n\n                                    (StringToDouble(_oLobLoc.Input.Fields(\"PfSplgLim\").Value) > 0) Then\n\n                    If (StringToDouble(_oLobLoc.Input.Fields(\"PfSplgLim\").Value) > 0) Then\n\n                        .SecondaryTitleText = GetSecondaryTitleText(\"editpnlSpoil\", \"editpnlSpoil_OnClick\", False)\n\n                    Else\n\n                        .SecondaryTitleText = GetSecondaryTitleText(\"editpnlSpoil\", \"editpnlSpoil_OnClick\", True)\n\n                    End If\n\n                    .Selected = True\n\n                    _oLobLoc.Input.Fields(\"PFCovSpoilSelect\").Value = \"1\"\n\n                End If\n\n                .Visible = True\n\n                .ToolTip = \"Check if you want Spoilage.\"\n\n                .ContentType = StackingPanelItem.ContentTypes.NoContent\n\n                .OnClientSelect = \"pnlSpoil_OnClientClick\"\n\n            End With\n\n",
    "G40": "            With pnlTnts\n\n                .PrimaryTitleText = \"Tenants Improvements & Betterments\"\n\n                .SecondaryTitleText = \" \"\n\n                If StringToDouble(_oLobLoc.Input.Fields(\"PFCovTntsSelect\").Value) > 0 OrElse _\n\n                                      (StringToDouble(_oLobLoc.Input.Fields(\"PfBldgLim\").Value) > 0 AndAlso _\n\n                                      _oLobLoc.Input.Fields(\"PfTntImprv\").Value.Trim = \"Y\") Then\n\n                    If (StringToDouble(_oLobLoc.Input.Fields(\"PfBldgLim\").Value) > 0 AndAlso _\n\n                                       _oLobLoc.Input.Fields(\"PfTntImprv\").Value.Trim = \"Y\") Then\n\n                        .SecondaryTitleText = GetSecondaryTitleText(\"editpnlTnts\", \"editpnlTnts_OnClick\", False)\n\n                    Else\n\n                        .SecondaryTitleText = GetSecondaryTitleText(\"editpnlTnts\", \"editpnlTnts_OnClick\", True)\n\n                    End If\n\n                    .Selected = True\n\n                    _oLobLoc.Input.Fields(\"PFCovTntsSelect\").Value = \"1\"\n\n                End If\n\n                .Visible = True\n\n                .ToolTip = \"Check if you want Tenants Improvements & Betterments.\"\n\n                .ContentType = StackingPanelItem.ContentTypes.NoContent\n\n                .OnClientClick = \"SetPanels_BuildingCoverages();pnlTenantsUnCheck();\"\n\n                .OnClientSelect = \"pnlTnts_OnClientClick\"\n\n            End With\n\n",
    "G41": "            With pnlPfAddInsBldgOwn\n\n                .PrimaryTitleText = \"Additional Insured- Building Owner\"\n\n                If _oLobLoc.Input(\"PfAddInsBldgOwnInd\").Value = \"Y\" Then\n\n                    .Selected = True\n\n                End If\n\n                .Visible = True\n\n                .ToolTip = \"Select for Add\u2019l Insured Bldg Owner coverage\"\n\n                .ContentType = StackingPanelItem.ContentTypes.NoContent\n\n                If _oLobData.Attributes.Common.PredominantState = \"CT\" Then\n\n                    .Visible = False\n\n                End If\n\n            End With\n\n",
    "G42": "            With pnlPfCondoAssoc\n\n                .PrimaryTitleText = \"Condominium Association\"\n\n                If _oLobLoc.Input(\"PfCondoAssocInd\").Value = \"Y\" Then\n\n                    .Selected = True\n\n                End If\n\n                .Visible = True\n\n                .ToolTip = \"Check box if Condominium Association\"\n\n                .ContentType = StackingPanelItem.ContentTypes.NoContent\n\n            End With\n\n",
    "G43": "            With pnlPfCondoCmmlUnt\n\n                .PrimaryTitleText = \"Condominium Commercial Unit-Owner\"\n\n                If _oLobLoc.Input(\"PfCondoCmmlUntInd\").Value = \"Y\" Then\n\n                    .Selected = True\n\n                End If\n\n                .Visible = True\n\n                .ToolTip = \"Check box if Condominium Association\"\n\n                .ContentType = StackingPanelItem.ContentTypes.NoContent\n\n            End With\n\n",
    "G44": "            With pnlPfLossPay\n\n",
    "S31": "                Dim isIntuitiveSupportOn As Boolean = IsIntuitiveEndorsmentSupportOn(_oCOData.Attributes.Common.PolicyEffectiveDate) AndAlso\n\n",
    "G45": "                    _oCOData.Attributes.Common.PolicyTransactionType.Equals(getTransactionType(ChangeEndorsement))\n\n                .PrimaryTitleText = \"Loss Payee\"\n\n                If _oLobLoc.Input(\"PfLossPayInd\").Value.CL_EqualsYesAbbreviation() Then\n\n                    .Selected = True\n\n                    If isIntuitiveSupportOn Then\n\n                        notificationSection.Add(Notification.NotificationType.Warning,\n\n                        \"pnlPfLossPay\", \"Property has a loss payee. Form CP 12 18 will attach and must be filled out before issuance.\")\n\n                    End If\n\n                End If\n\n                LossPayeeCvgOnClick(pnlPfLossPay,isIntuitiveSupportOn)\n\n                .Visible = True\n\n                .ToolTip = \"Check box for Loss Payee Provisions\"\n\n            End With\n\n",
    "G46": "            With pnlPfLossPay\n\n                If IsThirdPartyChangesEligible(_oCOData.Attributes.Common.PolicyEffectiveDate, getLineOfBusiness([Property])) Then\n\n                    .ContentType = StackingPanelItem.ContentTypes.SubContent\n\n                    .OnClientHide = \"RemoveLossPayee();\"\n\n                    .OnClientShow = \"DisplayLossPayeeLink();\"\n\n                    .OnClientClick = String.Format(\"DisplayWarningMessage('{0}');DisplayLossPayeeLink();\", isIntuitiveSupportOn)\n\n                Else\n\n                    .ContentType = StackingPanelItem.ContentTypes.NoContent\n\n                    .OnClientClick = String.Format(\"DisplayWarningMessage('{0}');\", isIntuitiveSupportOn)\n\n                End If\n\n            End With\n\n",
    "G47": "            With pnlPfDebrisRemovalAdditionalInsurance\n\n                .Visible = False\n\n                .Selected = False\n\n                If CheckPfIso2012Phase2(_sState, _oLobData.Attributes.Common.PolicyEffectiveDate)\n\n",
    "S32": "                    Dim coverageName As string = $\"{pfConstants.DebrisRemovalLabel} Additional Insurance\"\n\n",
    "G48": "                    .Visible = True\n\n                    If String.IsNullOrWhiteSpace(_oLobLoc.Input(\"PfDebrisRmvllLim\").Value).Equals(False) Then\n\n                        .Selected = True\n\n                    End If\n\n                    .PrimaryTitleText = coverageName\n\n                    .ContentType = StackingPanelItem.ContentTypes.SubContent\n\n                    SetDebrisRemovalAdditionalInsuranceLimit()\n\n                    pnlDebrisremovalDetailsItem.PrimaryTitleText = coverageName\n\n                    pnlDebrisremovalDetailsItem.AddHelpItem(coverageName, pfConstants.DebrisRemovalAdditionalinsuranceHelpId, \"txtPfDebrisRemovalLimit\")\n\n                End if\n\n            End With\n\n",
    "G49": "            lblPfDebrisRemovalLimit.Text = $\"{pfConstants.DebrisRemovalLabel} Amount\"\n\n            lblPfDebrisRemovalLimit.ForControl = \"txtPfDebrisRemovalLimit\"\n\n            With txtPfDebrisRemovalLimit\n\n                .MaxLength = 10\n\n                .AllowKeys = \"0-9\"\n\n                .Validators.DataType.Type = ValidationDataType.Integer\n\n                .Validators.DataType.ErrorMessage = $\"{pfConstants.DebrisRemovalLabel} Amount should be numeric\"\n\n                .Validators.DataType.Enabled = True\n\n                .Validators.Required.Enabled = True\n\n                .Validators.Range.Enabled = True\n\n                .Validators.Range.MinimumValue = \"1\"\n\n                .Validators.Range.MaximumValue = \"9999999999\"\n\n                .Validators.Range.ErrorMessage = \"Invalid value\"\n\n                .ToolTip = $\"Enter the <u>TOTAL</u> {pfConstants.DebrisRemovalLabel} Amount desired\"\n\n                .Text = _oLobLoc.Input(\"PfDebrisRmvllLim\").Value.Trim()\n\n                .OnClientBlur = \"InsertCommas('txtPfDebrisRemovalLimit');\"\n\n            End With\n\n",
    "G50": "            With pnlPfSinkHoleLoss\n\n",
    "S33": "                Dim policyEffectiveDate As String = _oCOData.Attributes.Common.PolicyEffectiveDate\n\n",
    "G51": "                If IsRuleApplicable(policyEffectiveDate, _oLobLoc.StateCode, SinkHoleLossCoverage) Then\n\n",
    "S34": "                    Dim stateDescription = CurrentCulture.TextInfo.ToTitleCase(GetStateDescription(_oLobLoc.StateCode).ToLower())\n\n",
    "G52": "                    If String.IsNullOrWhiteSpace(_oLobLoc.Input(SinkHoleLossCoverageIndicator).Value) Then\n\n",
    "S35": "                        Dim pfLocation As New LobPF.PfLoc\n\n",
    "G53": "                        pfLocation.SetSinkHoleLossAcrossState(_oLobData.Locations, policyEffectiveDate)\n\n                    End If\n\n                    .PrimaryTitleText = $\"{stateDescription} Sinkhole Loss Coverage\"\n\n                    If _oLobLoc.Input(SinkHoleLossCoverageIndicator).Value.CL_EqualsYesAbbreviation() Then\n\n                        .Selected = True\n\n                    End If\n\n                    .ToolTip = $\"Select if {stateDescription} Sinkhole Loss Coverage is desired.\"\n\n                    .ContentType = StackingPanelItem.ContentTypes.NoContent\n\n                    .Visible = True\n\n                    SetHelpItem(.ID, pnlLocCoverageB)\n\n                Else\n\n                    .Visible = False\n\n                End If\n\n            End With\n\n",
    "G54": "            If _helpIdData.CL_FirstTableHasData() Then\n\n",
    "S36": "                Dim helpIdInfo As DataRow = _helpIdData.Tables(0).Select($\"PanelName ='{panelItem.PrimaryTitleText}' AND ControlId = '{controlId}'\").FirstOrDefault()\n\n",
    "G55": "                If helpIdInfo IsNot Nothing Then\n\n                    panelItem.AddHelpItem(helpIdInfo(\"CoverageName\").ToString(),\n\n                                            helpIdInfo(\"HelpId\").ToString().CL_ToInt32(),\n\n                                            controlId)\n\n                End If\n\n            End If\n\n",
    "S37": "            Dim policyEffectiveDate As Date = Date.ParseExact(_oCOData.Attributes.Common.PolicyEffectiveDate,\n\n",
    "G56": "                                                              DATE_FORMAT_MMDDYY, Globalization.CultureInfo.InvariantCulture)\n\n",
    "S38": "            Dim helpIdRequest As New HelpIconMessageInfo With {\n\n",
    "G57": "                .PageName = \"LocationCovInput\",\n\n                .PolicyEffectiveDate = policyEffectiveDate,\n\n                .LobCode = getLineOfBusiness([Property]),\n\n                .StateCode = _oLobLoc.StateCode\n\n            }\n\n            _helpIdData = GetHelpIconMessage(helpIdRequest)\n\n",
    "G58": "            With mainTabBar.Items\n\n                .Item(0).Selected = False\n\n                .Item(1).Selected = False\n\n                .Item(2).Selected = False\n\n                .Item(3).Selected = True\n\n                .Item(4).Selected = False\n\n                .Item(5).Selected = False\n\n            End With\n\n            If _bDisableNav = False Then\n\n                btnCancel.Visible = True\n\n                btnExitToDashboard.Visible = True\n\n                btnIssue.Visible = False\n\n                lobTabBar.Enabled = True\n\n                CType(mainTabBar.Items.Item(0), SIGI.Web.UI.WebControls.BarItem).Enabled = True\n\n                CType(mainTabBar.Items.Item(1), SIGI.Web.UI.WebControls.BarItem).Enabled = True\n\n                CType(mainTabBar.Items.Item(2), SIGI.Web.UI.WebControls.BarItem).Enabled = True\n\n                CType(mainTabBar.Items.Item(4), SIGI.Web.UI.WebControls.BarItem).Enabled = True\n\n                CType(mainTabBar.Items.Item(5), SIGI.Web.UI.WebControls.BarItem).Enabled = True\n\n                quoteSummary.Enabled = True\n\n                If _bShowRateButton = True Then\n\n                    btnRate.Visible = True\n\n                    btnRate2.Visible = True\n\n                Else\n\n                    btnRate.Visible = False\n\n                    btnRate2.Visible = False\n\n                End If\n\n                btnSubmitForReview.Visible = False\n\n                navback.Visible = True\n\n                navForward.Visible = True\n\n                btnWalkThru.Visible = False\n\n            Else\n\n                btnCancel.Visible = False\n\n                btnExitToDashboard.Visible = False\n\n                btnIssue.Visible = False\n\n                btnRate.Visible = False\n\n                btnRate2.Visible = False\n\n                btnSubmitForReview.Visible = False\n\n                navback.Visible = False\n\n                navForward.Visible = False\n\n                CType(mainTabBar.Items.Item(0), SIGI.Web.UI.WebControls.BarItem).Enabled = False\n\n                CType(mainTabBar.Items.Item(1), SIGI.Web.UI.WebControls.BarItem).Enabled = False\n\n                CType(mainTabBar.Items.Item(2), SIGI.Web.UI.WebControls.BarItem).Enabled = False\n\n                CType(mainTabBar.Items.Item(4), SIGI.Web.UI.WebControls.BarItem).Enabled = False\n\n                CType(mainTabBar.Items.Item(5), SIGI.Web.UI.WebControls.BarItem).Enabled = False\n\n                quoteSummary.Enabled = False\n\n                lobTabBar.Enabled = False\n\n                btnWalkThru.Text = \"OK\"\n\n            End If\n\n",
    "S39": "            Dim sLabel As String\n\n",
    "S40": "            Dim sLocation As String\n\n",
    "S41": "            Dim sBuilding As String\n\n",
    "G59": "            sLocation = oL03.LocationNumber\n\n            sBuilding = oL03.BuildingNumber\n\n            sLabel = \"LOCATION \" & sLocation & \" BUILDING \" & sBuilding\n\n            lblLocNumBuildingInfo.Text = sLabel\n\n            sLabel = oL03(\"LcStreet1\").Value.Trim & \" | \" & oL03(\"LcCity\").Value.Trim() & \", \" & _\n\n                     oL03(\"LcState\").Value.Trim() & \"  \" & oL03(\"LcZipCode\").Value.Trim()\n\n            lblLocAddress.Text = sLabel\n\n",
    "G60": "            setcboPfBgiRateTyp()\n\n            setlchkOverride()\n\n            SetchkOverride()\n\n            settxtPMLopReason()\n\n            settxtPMEstOccpy()\n\n            settxtPMEstOccpyApt()\n\n            settxtPMEstOccpyRest()\n\n            settxtPMEstOccpyOff()\n\n            settxtPMEstOccpyRetail()\n\n            settxtPMEstOccpyService()\n\n            settxtPMEstOccpyManf()\n\n            settxtEstimateReason()\n\n            SetltxtFloorArea()\n\n            settxtFloorArea()\n\n            settxtPfNoStories()\n\n            SetltxtPfNoStories()\n\n            settxtTntsOcc()\n\n            SetltxtTntsOcc()\n\n",
    "S42": "            Dim sProMetrixComplete As String = String.Empty\n\n",
    "G61": "            pnlProMetrix.PrimaryTitleText = \"ProMetrix Fields\"\n\n            pnlProMetrix.AllowExpandCollapse = True\n\n",
    "S43": "            Dim PrometrixStatus As String = _oLobLoc.Input(\"PfPMLocStatus\").Value\n\n",
    "G62": "            If String.IsNullOrWhiteSpace(PrometrixStatus) = False Then\n\n                sProMetrixComplete = FormatUtility.MidString(PrometrixStatus.Trim, 1, 3)\n\n            End If\n\n            If _oLobData.Policy.Input(\"PfPolProMetrixInd\").Value.Trim.Equals(\"Y\") Then\n\n                pnlProMetrix.Visible = True\n\n                pnlProMetrix.Expanded = True\n\n            Else\n\n                pnlProMetrix.Visible = False\n\n            End If\n\n            ltxtPMLopReason.ForControl = \"txtPMLopReason\"\n\n            ltxtPMLopReason.Text = \"ProMetrix Estimated LOP Override Reason\"\n\n            With txtPMLopReason\n\n                .MaxLength = 70\n\n                .EnableOnSubmit = True\n\n                .AllowKeys = \"0-9A-Z,. \"\n\n                .Text = _oLobLoc.Input(\"PfPMLocSpecDocumentt\").Value.Trim\n\n                .ToolTip = \"Enter Reason to Override Address for Prometrix.\"\n\n                If _oLobData.Policy.Input(\"PfPolProMetrixInd\").Value.Trim.Equals(\"Y\") = False Then\n\n                    .Visible = False\n\n                    .Enabled = False\n\n                Else\n\n                    If (sProMetrixComplete.Equals(\"SLC\") OrElse sProMetrixComplete.Equals(\"SIC\")) AndAlso _oLobLoc.Input.Fields(\"PfPMMatchType\").Value.Trim.ToUpper.Equals(\"NEARBY\") Then\n\n                        .Visible = True\n\n                        .Enabled = True\n\n                    Else\n\n                        .Visible = False\n\n                        .Enabled = False\n\n                    End If\n\n                End If\n\n            End With\n\n",
    "G63": "            lcboPfBgiRateTyp.ForControl = \"cboPfBgiRateTyp\"\n\n            lcboPfBgiRateTyp.Text = \"Rate Type\"\n\n            With cboPfBgiRateTyp\n\n                .EnableOnSubmit = True\n\n                .Enabled = True\n\n                .EmptySelectionText = EMPTY_SELECT_TXT\n\n                .ToolTip = \"Enter type of Basic Group 1 rates\"\n\n                .Validators.Required.Enabled = True\n\n                .DataTextField = \"Help_Desc\"\n\n                .DataValueField = \"Code\"\n\n                .DataSource = _oLobBus.GetListRateTypeBic(_oLobData.Attributes.Common.PolicyEffectiveDate, _\n\n                        _sProgCode, _sUserType, _sODType, _oLobLoc.Input(\"PfBgiRateTyp\").Value, False, _oLobData)\n\n                .DataBind()\n\n            End With\n\n            SetDropDownValue(_oLobLoc.Input(\"PfBgiRateTyp\").Value, cboPfBgiRateTyp)\n\n",
    "G64": "            With lchkOverride\n\n                .ForControl = \"chkOverride\"\n\n                .Text = PrometrixCall\n\n            End With\n\n",
    "G65": "            With chkOverride\n\n                .ToolTip = PrometrixCallToolTip\n\n                .Checked = False\n\n                If _oLobData.Policy.Input(\"PfPolProMetrixInd\").Value.Trim.Equals(\"Y\") AndAlso (String.IsNullOrWhiteSpace(_oLobLoc.Input(\"PfPMLocStatus\").Value) = False) Then\n\n                    .Visible = True\n\n                Else\n\n                    .Visible = False\n\n                End If\n\n            End With\n\n",
    "G66": "              ByVal cboItem As SIGI.Web.UI.WebControls.DropDownList)\n\n            For Each Item As ListItem In cboItem.Items\n\n                If sItem.Trim = String.Empty Then\n\n                    Exit For\n\n                Else\n\n                    If Item.Value.Trim = sItem.Trim() Then\n\n                        Item.Selected = True\n\n                        Exit For\n\n                    End If\n\n                End If\n\n            Next\n\n",
    "S44": "            Dim pfPMLocPctOccppied As String = String.Empty\n\n",
    "S45": "            Dim pfBgiRateTyp As Boolean = False\n\n",
    "G67": "            Const RATETYPE_6 As String = \"6\"\n\n            With ltxtPMEstOccpy\n\n                .ForControl = \"txtPMEstOccpy\"\n\n                If _oLobBus.prometrixLossCostChange(_oLobData.Attributes.Common.PolicyEffectiveDate, _sTrxType.Substring(0, 2)) Then\n\n                    .Text = \"Part of the building occupied by insured %.<br>If there are other occupancies in the building, please provide the following information:\"\n\n                Else\n\n                    .Text = \"Part of the building occupied by insured %.\"\n\n                End If\n\n            End With\n\n            With _oLobLoc\n\n                pfPMLocPctOccppied = .Input(\"PfPMLocPctOccppied\").Value.Trim\n\n                pfBgiRateTyp = .Input(\"PfBgiRateTyp\").Value.Trim().Equals(RATETYPE_6)\n\n            End With\n\n            With txtPMEstOccpy\n\n                .MaxLength = 3\n\n                .EnableOnSubmit = True\n\n                .Text = pfPMLocPctOccppied\n\n                .ToolTip = \"Enter Part of the building occupied by insured.\"\n\n                .AllowKeys = \"0-9.\"\n\n                If _oLobData.Policy.Input(\"PfPolProMetrixInd\").Value.CL_EqualsYesAbbreviation() = False Then\n\n                    .Visible = False\n\n                    .Enabled = False\n\n                Else\n\n                    If pfBgiRateTyp Then\n\n                        .Visible = True\n\n                        .Enabled = True\n\n                    Else\n\n                        .Visible = False\n\n                        .Enabled = False\n\n                    End If\n\n                End If\n\n            End With\n\n",
    "S46": "            Dim sProMetrixComplete As String = String.Empty\n\n",
    "S47": "            Dim pfPMLocStatus As String = String.Empty\n\n",
    "S48": "            Dim pfPMLocAptPct As String = String.Empty\n\n",
    "S49": "            Dim pfBgiRateTyp As Boolean = False\n\n",
    "G68": "            Const RATETYPE_6 As String = \"6\"\n\n            With _oLobLoc\n\n                pfPMLocStatus = .Input(\"PfPMLocStatus\").Value.Trim()\n\n                pfPMLocAptPct = .Input(\"PfPMLocAptPct\").Value.Trim\n\n                pfBgiRateTyp = .Input(\"PfBgiRateTyp\").Value.Trim().Equals(RATETYPE_6)\n\n            End With\n\n            If String.IsNullOrWhiteSpace(pfPMLocStatus) = False Then\n\n                sProMetrixComplete = MidString(pfPMLocStatus, 3, 1)\n\n            End If\n\n            With ltxtPMEstOccpyApt\n\n                .ForControl = \"txtPMEstOccpyApt\"\n\n                If _oLobBus.prometrixLossCostChange(_oLobData.Attributes.Common.PolicyEffectiveDate, _sTrxType.Substring(0, 2)) Then\n\n                    .Text = \"Apartment Occupied %.<br>If there are other occupancies in the building, please provide the following information:\"\n\n                Else\n\n                    .Text = \"Apartment Occupied %.\"\n\n                End If\n\n            End With\n\n            With txtPMEstOccpyApt\n\n                .MaxLength = 3\n\n                .EnableOnSubmit = True\n\n                .Text = pfPMLocAptPct\n\n                .ToolTip = \"Enter Part of the building occupied by apartments.\"\n\n                .AllowKeys = \"0-9.\"\n\n                If _oLobData.Policy.Input(\"PfPolProMetrixInd\").Value.CL_EqualsYesAbbreviation() = False Then\n\n                    .Visible = False\n\n                    .Enabled = False\n\n                Else\n\n                    If pfBgiRateTyp Then\n\n                        .Visible = True\n\n                        .Enabled = True\n\n                    Else\n\n                        .Visible = False\n\n                        .Enabled = False\n\n                    End If\n\n                End If\n\n            End With\n\n",
    "S50": "            Dim sProMetrixComplete As String = String.Empty\n\n",
    "G69": "            If _oLobLoc.Input(\"PfPMLocStatus\").Value.Trim <> \"\" Then\n\n                sProMetrixComplete = Mid$(_oLobLoc.Input(\"PfPMLocStatus\").Value.Trim, 3, 1)\n\n            End If\n\n            ltxtPMEstOccpyRest.ForControl = \"txtPMEstOccpyRest\"\n\n            ltxtPMEstOccpyRest.Text = \"Resturants Occupied %\"\n\n            With txtPMEstOccpyRest\n\n                .MaxLength = 3\n\n                .EnableOnSubmit = True\n\n                .Text = _oLobLoc.Input(\"PfPMLocResturantPct\").Value.Trim\n\n                .ToolTip = \"Enter Part of the building occupied by resturants.\"\n\n                .AllowKeys = \"0-9.\"\n\n                If _oLobData.Policy.Input(\"PfPolProMetrixInd\").Value.Trim <> \"Y\" Then\n\n                    .Visible = False\n\n                    .Enabled = False\n\n                Else\n\n                    If _oLobLoc.Input(\"PfBgiRateTyp\").Value.Trim() = \"6\" Then\n\n                        .Visible = True\n\n                        .Enabled = True\n\n                    Else\n\n                        .Visible = False\n\n                        .Enabled = False\n\n                    End If\n\n                End If\n\n            End With\n\n",
    "S51": "            Dim sProMetrixComplete As String = String.Empty\n\n",
    "G70": "            If _oLobLoc.Input(\"PfPMLocStatus\").Value.Trim <> \"\" Then\n\n                sProMetrixComplete = Mid$(_oLobLoc.Input(\"PfPMLocStatus\").Value.Trim, 3, 1)\n\n            End If\n\n            ltxtPMEstOccpyOff.ForControl = \"txtPMEstOccpyOff\"\n\n            ltxtPMEstOccpyOff.Text = \"Office Occupied %\"\n\n            With txtPMEstOccpyOff\n\n                .MaxLength = 3\n\n                .EnableOnSubmit = True\n\n                .Text = _oLobLoc.Input(\"PfPMLocOfficePct\").Value.Trim\n\n                .ToolTip = \"Enter Part of the building occupied by offices.\"\n\n                .AllowKeys = \"0-9.\"\n\n                If _oLobData.Policy.Input(\"PfPolProMetrixInd\").Value.Trim <> \"Y\" Then\n\n                    .Visible = False\n\n                    .Enabled = False\n\n                Else\n\n                    If _oLobLoc.Input(\"PfBgiRateTyp\").Value.Trim() = \"6\" Then\n\n                        .Visible = True\n\n                        .Enabled = True\n\n                    Else\n\n                        .Visible = False\n\n                        .Enabled = False\n\n                    End If\n\n                End If\n\n            End With\n\n",
    "S52": "            Dim sProMetrixComplete As String = String.Empty\n\n",
    "G71": "            If _oLobLoc.Input(\"PfPMLocStatus\").Value.Trim <> \"\" Then\n\n                sProMetrixComplete = Mid$(_oLobLoc.Input(\"PfPMLocStatus\").Value.Trim, 3, 1)\n\n            End If\n\n            ltxtPMEstOccpyRetail.ForControl = \"txtPMEstOccpyRetail\"\n\n            ltxtPMEstOccpyRetail.Text = \"Retail Sales Occupied %\"\n\n            With txtPMEstOccpyRetail\n\n                .MaxLength = 3\n\n                .EnableOnSubmit = True\n\n                .Text = _oLobLoc.Input(\"PfPMLocRetailPct\").Value.Trim\n\n                .ToolTip = \"Enter Part of the building occupied by retail Sales.\"\n\n                .AllowKeys = \"0-9.\"\n\n                If _oLobData.Policy.Input(\"PfPolProMetrixInd\").Value.Trim <> \"Y\" Then\n\n                    .Visible = False\n\n                    .Enabled = False\n\n                Else\n\n                    If _oLobLoc.Input(\"PfBgiRateTyp\").Value.Trim() = \"6\" Then\n\n                        .Visible = True\n\n                        .Enabled = True\n\n                    Else\n\n                        .Visible = False\n\n                        .Enabled = False\n\n                    End If\n\n                End If\n\n            End With\n\n",
    "S53": "            Dim sProMetrixComplete As String = String.Empty\n\n",
    "G72": "            If _oLobLoc.Input(\"PfPMLocStatus\").Value.Trim <> \"\" Then\n\n                sProMetrixComplete = Mid$(_oLobLoc.Input(\"PfPMLocStatus\").Value.Trim, 3, 1)\n\n            End If\n\n            ltxtPMEstOccpyService.ForControl = \"txtPMEstOccpyService\"\n\n            ltxtPMEstOccpyService.Text = \"-\tService Occupancies  Occupied %\"\n\n            With txtPMEstOccpyService\n\n                .MaxLength = 3\n\n                .EnableOnSubmit = True\n\n                .Text = _oLobLoc.Input(\"PfPMLocServicelPct\").Value.Trim\n\n                .ToolTip = \"Enter Part of the building occupied by - Service Occupancies .\"\n\n                .AllowKeys = \"0-9.\"\n\n                If _oLobData.Policy.Input(\"PfPolProMetrixInd\").Value.Trim <> \"Y\" Then\n\n                    .Visible = False\n\n                    .Enabled = False\n\n                Else\n\n                    If _oLobLoc.Input(\"PfBgiRateTyp\").Value.Trim() = \"6\" Then\n\n                        .Visible = True\n\n                        .Enabled = True\n\n                    Else\n\n                        .Visible = False\n\n                        .Enabled = False\n\n                    End If\n\n                End If\n\n            End With\n\n",
    "S54": "            Dim sProMetrixComplete As String = String.Empty\n\n",
    "G73": "            If _oLobLoc.Input(\"PfPMLocStatus\").Value.Trim <> \"\" Then\n\n                sProMetrixComplete = Mid$(_oLobLoc.Input(\"PfPMLocStatus\").Value.Trim, 3, 1)\n\n            End If\n\n            ltxtPMEstOccpyManf.ForControl = \"txtPMEstOccpyManf\"\n\n            ltxtPMEstOccpyManf.Text = \"- Manufacturing Occupied %\"\n\n            With txtPMEstOccpyManf\n\n                .MaxLength = 3\n\n                .EnableOnSubmit = True\n\n                .Text = _oLobLoc.Input(\"PfPMLocManufactlPct\").Value.Trim\n\n                .ToolTip = \"Enter Part of the building occupied by - Manufacturing.\"\n\n                .AllowKeys = \"0-9.\"\n\n                If _oLobData.Policy.Input(\"PfPolProMetrixInd\").Value.Trim <> \"Y\" Then\n\n                    .Visible = False\n\n                    .Enabled = False\n\n                Else\n\n                    If _oLobLoc.Input(\"PfBgiRateTyp\").Value.Trim() = \"6\" Then\n\n                        .Visible = True\n\n                        .Enabled = True\n\n                    Else\n\n                        .Visible = False\n\n                        .Enabled = False\n\n                    End If\n\n                End If\n\n            End With\n\n",
    "G74": "            ltxtEstimateReason.ForControl = \"txtEstimateReason\"\n\n            ltxtEstimateReason.Text = \"Estimate-User Enter reason\"\n\n            With txtEstimateReason\n\n                .MaxLength = 70\n\n                .EnableOnSubmit = True\n\n                .AllowKeys = \"0-9A-Z,. \"\n\n                .Text = _oLobLoc.Input(\"PfPMEstUserTxt\").Value.Trim\n\n                .ToolTip = \"Enter Reason why user selected Estimated Loss Costs - User Entered.\"\n\n                If _oLobLoc.Input(\"PfBgiRateTyp\").Value.Trim = \"7\" Then\n\n                    .Visible = True\n\n                    .Enabled = True\n\n                Else\n\n                    .Visible = False\n\n                    .Enabled = False\n\n                End If\n\n            End With\n\n",
    "G75": "            With ltxtFloorArea\n\n                .ForControl = \"txtFloorArea\"\n\n                .Text = \"Total Building Area\"\n\n            End With\n\n",
    "S55": "            Dim EstimatedRisk As Boolean = (_oLobLoc.Input(\"PfBgiRateTyp\").Value.Trim.Equals(\"6\") AndAlso _oLobData.Policy.Input(\"PfPolProMetrixInd\").Value.Trim.Equals(\"Y\"))\n\n",
    "G76": "            With txtFloorArea\n\n                .EnableOnSubmit = True\n\n                .Text = _oLobLoc.Input(\"PfTotalArea\").Value.Trim()\n\n                .MaxLength = 7\n\n                .AllowKeys = \"0-9\"\n\n                .Validators.DataType.Type = ValidationDataType.Integer\n\n                .Validators.DataType.ErrorMessage = \"Floor Area be numeric\"\n\n                .Validators.DataType.Enabled = True\n\n                .Visible = EstimatedRisk\n\n                .Enabled = EstimatedRisk\n\n            End With\n\n",
    "G77": "            With ltxtPfNoStories\n\n                .ForControl = \"txtPfNoStories\"\n\n                .Text = \"Number of Stories\"\n\n            End With\n\n",
    "S56": "            Dim EstimatedRisk As Boolean = (_oLobLoc.Input(\"PfBgiRateTyp\").Value.Trim.Equals(\"6\") AndAlso _oLobData.Policy.Input(\"PfPolProMetrixInd\").Value.Trim.Equals(\"Y\"))\n\n",
    "G78": "            With txtPfNoStories\n\n                .EnableOnSubmit = True\n\n                .Text = _oLobLoc.Input(\"PfNoOfStories\").Value.Trim\n\n                .ToolTip = \"Number of Stories\"\n\n                .AllowKeys = \"0-9\"\n\n                .MaxLength = 2\n\n                .Visible = EstimatedRisk\n\n                .Enabled = EstimatedRisk\n\n            End With\n\n",
    "G79": "            With ltxtTntsOcc\n\n                .ForControl = \"txtTntsOcc\"\n\n                .Text = \"Tenant Occupied Square Feet\"\n\n            End With\n\n",
    "S57": "            Dim EstimatedRisk As Boolean = (_oLobLoc.Input(\"PfBgiRateTyp\").Value.Trim.Equals(\"6\") AndAlso _oLobData.Policy.Input(\"PfPolProMetrixInd\").Value.Trim.Equals(\"Y\"))\n\n",
    "G80": "            With txtTntsOcc\n\n                .EnableOnSubmit = True\n\n                .Text = _oLobLoc.Input(\"PfTntOccSF\").Value.Trim()\n\n                .ToolTip = \"Enter total square feet occupied by tenant.\"\n\n                .MaxLength = 7\n\n                .AllowKeys = \"0-9\"\n\n                .Validators.DataType.Type = ValidationDataType.Integer\n\n                .Validators.DataType.ErrorMessage = \"Square Footage be numeric\"\n\n                .Validators.DataType.Enabled = True\n\n                .Visible = EstimatedRisk\n\n                .Enabled = EstimatedRisk\n\n            End With\n\n",
    "S58": "            Dim basicGroupRateType As String = _oLobLoc.Input(FIELD_PFBGIRATETYP).Value.Trim\n\n",
    "S59": "            Dim prometrixRateType As New HashSet(Of String)() From {{CType(LOCATION_RATE_TYPE.SPECIFIC, Integer).ToString},\n\n",
    "G81": "                                                                 {CType(LOCATION_RATE_TYPE.ESTIMATED_LOSS_COSTS_PROMETRIX, Integer).ToString}}\n\n            If ((isBURSupportApplicable AndAlso (prometrixRateType.Contains(basicGroupRateType) OrElse\n\n                              basicGroupRateType.Equals(CType(LOCATION_RATE_TYPE.CLAS, Integer).ToString))) OrElse\n\n                          (isBURSupportApplicable.Equals(False) AndAlso prometrixRateType.Contains(basicGroupRateType))).Equals(False) Then\n\n                _oLobLoc.Input(LOCATION_PROMETRIX_STATUS).Value = String.Empty\n\n            End If\n\n",
    "G82": "            SaveLobData()\n\n            _oValidationResults = New ErrorCollection()\n\n            _oLobBusValidator.Validate(_oCOData, _oLobData, _oValidationResults, \"LCov\")\n\n",
    "S60": "            Dim RateType As String = _oLobLoc.Input(\"PfBgiRateTyp\").Value.Trim\n\n",
    "S61": "            Dim propertyPolicyOld = New SIGI.CLAS.BusinessServices.LobPF.PolicyData(_sQtPolNum, _sInstanceId, BasePolicyData.LoadType.Default, BasePolicyData.DataGroup.Old)\n\n",
    "G83": "            _oLobBusShared.CallPrometrixForRateTypeChange(_oLobLoc, _oCOData.Attributes.Common.PolicyTransactionType, previousRateType, propertyPolicyOld)\n\n            If chkOverride.Checked Then\nDeletePrometrixOnOverriden()\n\n\n End If\n\n            If _oLobData.Attributes(\"BPP_Present\").Equals(\"False\") AndAlso _oLobLoc.Input.Fields(\"PFCovBppSelect\").Value.Equals(\"1\") Then\n\n                _oLobData.Attributes(\"BPP_Present\") = \"Present\"\n\n                _oLobLoc.Input(\"PfPMLineNumber\").Value = String.Empty\n\n                If RateType.Equals(\"6\") Then\n\n                    _oLobLoc.Input(\"PfPMLocStatus\").Value = String.Empty\n\n                ElseIf RateType.Equals(\"2\") Then\n\n                    _oLobLoc.Input(\"PfPMLocStatus\").Value = \"SIC\"\n\n                End If\n\n            End If\n\n            If _oLobData.Attributes(\"LLBP_Present\").Equals(\"False\") AndAlso _oLobLoc.Input.Fields(\"PFCovLglPPSelect\").Value.Equals(\"1\") Then\n\n                _oLobData.Attributes(\"LLBP_Present\") = \"LLBPPresent\"\n\n                _oLobLoc.Input(\"PfPMLineNumber\").Value = String.Empty\n\n                If RateType.Equals(\"6\") Then\n\n                    _oLobLoc.Input(\"PfPMLocStatus\").Value = String.Empty\n\n                ElseIf RateType.Equals(\"2\") Then\n\n                    _oLobLoc.Input(\"PfPMLocStatus\").Value = \"SIC\"\n\n                End If\n\n            End If\n\n            If _oValidationResults.ErrorCount <> 0 Then\n\n                Return False\n\n            Else\n\n                Return True\n\n            End If\n\n",
    "S62": "            Dim rateType As String\n\n",
    "S63": "            Dim prometrixComplete As String = String.Empty\n\n",
    "G84": "            SaveCoverages()\n\n            previousRateType = _oLobLoc.Input.Fields(FIELD_PFBGIRATETYP).Value\n\n",
    "S64": "            Dim proMetrixIndicator As String = _oLobData.Policy.Input.Fields(PROPERTY_LOCATION_PROMETRIX_INDICATOR).Value.Trim\n\n",
    "G85": "            If (proMetrixIndicator.CL_EqualsYesAbbreviation.Equals(False)) Then\n\n                DeleteProMetrixFeilds(_oLobLoc)\n\n            End If\n\n            If proMetrixIndicator.CL_EqualsYesAbbreviation Then\n\n                rateType = cboPfBgiRateTyp.SelectedValue\n\n                SetStatusOnRateChange(rateType, _oLobLoc.Input)\n\n",
    "S65": "                Dim locationStatus As String = _oLobLoc.Input(LOCATION_PROMETRIX_STATUS).Value\n\n",
    "G86": "                If String.IsNullOrWhiteSpace(locationStatus).Equals(False) Then\n\n                    prometrixComplete = locationStatus.Trim.CL_Mid(1, 3)\n\n                End If\n\n                DeleteRiskIdForClassRateType(rateType.Trim, _oLobLoc.Input)\n\n                If String.IsNullOrWhiteSpace(rateType).Equals(False) Then\n\n                    _oLobLoc.Input.Fields(FIELD_PFBGIRATETYP).Value = cboPfBgiRateTyp.SelectedValue\n\n                End If\n\n",
    "S66": "                Dim basicGroupRateType As String = _oLobLoc.Input(FIELD_PFBGIRATETYP).Value.Trim\n\n",
    "S67": "                Dim prometrixRateType As New HashSet(Of LOCATION_RATE_TYPE)() From {{LOCATION_RATE_TYPE.SPECIFIC},\n\n",
    "G87": "                                                                 {LOCATION_RATE_TYPE.ESTIMATED_LOSS_COSTS_PROMETRIX}}\n\n",
    "S68": "                Dim isprometrixRateTypeEligible As Boolean = prometrixRateType.Contains(CType([Enum].Parse(GetType(LOCATION_RATE_TYPE), basicGroupRateType), LOCATION_RATE_TYPE))\n\n",
    "S69": "                Dim isClassRateTypEligible As Boolean = (isBURSupportApplicable AndAlso (isprometrixRateTypeEligible OrElse\n\n",
    "G88": "                                         CType([Enum].Parse(GetType(LOCATION_RATE_TYPE), basicGroupRateType), LOCATION_RATE_TYPE).Equals(LOCATION_RATE_TYPE.CLAS)))\n\n                If (isClassRateTypEligible OrElse (isBURSupportApplicable.Equals(False) AndAlso isprometrixRateTypeEligible)).Equals(False) Then\n\n                    DeleteProMetrixFeilds(_oLobLoc)\n\n                End If\n\n                SetProMetrixRecords(prometrixComplete, locationStatus)\n\n            End If\n\n",
    "S70": "            Dim rateType As String = _oLobLoc.Input(FIELD_PFBGIRATETYP).Value.Trim\n\n",
    "G89": "            If rateType.Equals(CType(LOCATION_RATE_TYPE.ESTIMATED_LOSS_COSTS_PROMETRIX, Integer).ToString) OrElse sProMetrixComplete.Equals(SCHEDULED_PROBABLE_SELECTED) OrElse\n\n                _oLobLoc.Input(FIELD_PFPMREPORTTYPE).Value.Trim.Equals(\"M\") OrElse\n\n                   sProMetrixComplete.Equals(SCHEDULE_FEED_ERROR) OrElse locationStatus.Trim.Equals(ESTIMATED_FEED_ERROR) OrElse\n\n                   sProMetrixComplete.Equals(SCHEDULE_SINGLE_OCCUPANT_RESPONSE) Then\n\n                With _oLobLoc.Input\n\n                    .Fields(\"PfPMLocSpecDocumentt\").Value = txtPMLopReason.Text\n\n                    .Fields(\"PfPMLocPctOccppied\").Value = txtPMEstOccpy.Text\n\n                    .Fields(\"PfPMLocAptPct\").Value = txtPMEstOccpyApt.Text\n\n                    .Fields(\"PfPMLocOfficePct\").Value = txtPMEstOccpyOff.Text\n\n                    .Fields(\"PfPMLocResturantPct\").Value = txtPMEstOccpyRest.Text\n\n                    .Fields(\"PfPMLocRetailPct\").Value = txtPMEstOccpyRetail.Text\n\n                    .Fields(\"PfPMLocServicelPct\").Value = txtPMEstOccpyService.Text\n\n                    .Fields(\"PfPMLocManufactlPct\").Value = txtPMEstOccpyManf.Text\n\n                    If rateType.Equals(CType(LOCATION_RATE_TYPE.ESTIMATED_LOSS_COSTS_PROMETRIX, Integer).ToString) Then\n\n                        .Fields(\"PfTotalArea\").Value = txtFloorArea.Text\n\n                        .Fields(\"PfNoOfStories\").Value = txtPfNoStories.Text\n\n                        .Fields(\"PfTntOccSF\").Value = txtTntsOcc.Text\n\n                    End If\n\n                End With\n\n            End If\n\n            If rateType.Equals(CType(LOCATION_RATE_TYPE.ESTIMATED_LOSS_COSTS_USER_ENTERED, Integer).ToString) Then\n\n                _oLobLoc.Input.Fields(\"PfPMEstUserTxt\").Value = txtEstimateReason.Text\n\n            End If\n\n",
    "G90": "            _oLobLoc.Input.Fields(\"PfPMMatchType\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMTotalResultCount\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMRiskId\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMBuildingDescription\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMLatestOnSiteSurveyDate\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMScheduleAppliedDate\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMLatestPhoneSurveyDate\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMReportType\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMLatitude\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMLongitude\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMStreetAddress\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMPostalCity\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMState\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMZip\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMZip4\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMCounty\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMAlternateAddresses\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMMessage\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMExperienceLevelAdjustment\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMEffectiveDate\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMFilingDesignation\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMCIRCULAR\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMLimitOfInsuranceApplicableInd\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMFireRatingConstructionProtectio\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMBuildginRatedforFire\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMDescription\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMSprinklerInd\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMBuildingFireConstruction\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMDescription2\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMPublicProtectionClassificationCode\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMProtectiveSafeguardCode\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMProtectiveSafeguardCodeDesc\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMCommercialStatisticalPlanTerritoryCode\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMRatingConstBCEGcode\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMBuildingRatedForWind\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMBuildingRatedForWindDesc\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMBuildingWindconstruction\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMBuildingWindconstructionDesc\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMWindRatingConstructionBuildingEffectiveness\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMBasicGroupIISymbol\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMBasicGroupIISymbolDesc\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMLossCos\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMIsBuildingInd\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMLineNumber\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMCspClass\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMBGILossCostSpecific\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMBGILossCostClass\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMClassInsightRatio\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMBGIILossCostClass\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMBGIIEnhancedLossCostSpecific\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMWindFactorIndicated\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMWindFactorApplied\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMBcegsFactor\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMLocStatus\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMLocLINMUM\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMLocPMClassCode\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMLocEnterClassCode\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMLocClassDocumentt\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMLocPMConstCode\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMLocEnterConstCode\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMLocPMSprinkler\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMLocEnterSprinkler\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMLocSprinklerDocument\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMLossCos2\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMIsBuildingInd2\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMLineNumber2\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMCspClass2\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMBGIIEnhancedLossCostSpecific2\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMLossCos3\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMIsBuildingInd3\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMLineNumber3\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMCspClass3\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMBGIIEnhancedLossCostSpecific3\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMLossCos4\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMIsBuildingInd4\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMLineNumber4\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMCspClass4\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMBGIIEnhancedLossCostSpecific4\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMLossCos5\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMIsBuildingInd5\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMLineNumber5\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMCspClass5\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMBGIIEnhancedLossCostSpecific5\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMLossCos6\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMIsBuildingInd6\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMLineNumber6\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMCspClass6\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMBGIIEnhancedLossCostSpecific6\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMLossCos7\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMIsBuildingInd7\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMLineNumber7\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMCspClass7\").Value = \"\"\n\n            _oLobLoc.Input.Fields(\"PfPMBGIIEnhancedLossCostSpecific7\").Value = \"\"\n\n",
    "G91": "            With _oLobLoc.Input\n\n                If pnlBLDG.Selected Then\n\n",
    "S71": "                    Dim policyTransactionType As String = _oCOData.Attributes.Common.PolicyTransactionType\n\n",
    "S72": "                    Dim transactionList As New HashSet(Of String) From {\n\n",
    "G92": "                getTransactionType(NewBusinessQuote), getTransactionType(NewBusinessIssue),\n\n                getTransactionType(RenewalQuote), getTransactionType(RenewalIssue)}\n\n                    .Fields(InputFieldBuilding).Value = DEFAULT_VALUE_1\n\n                    If (transactionList.Contains(policyTransactionType) OrElse _nGrgJulEffDate >= 111274 OrElse\n\n                    (policyTransactionType.Equals(getTransactionType(ChangeEndorsement), StringComparison.CurrentCultureIgnoreCase) AndAlso\n\n                    String.IsNullOrWhiteSpace(.Fields(FIELD_PFBLDGLIM).Value))) Then\n\n                        .Fields(BuildingEarthQuakeRateTypeField).Value = Status.YES_ABBREVIATED\n\n                    End If\n\n                    If _oLobData.Attributes.Common.OneNDoneInd.CL_EqualsYesAbbreviation() Then\n\n                        _oLobPFBd.SetDefaultValuesBldgOneNDone(_oLobData.Attributes.Common.OneNDoneInd, _oLobData.Attributes.Common.OneNDoneType,\n\n                                                           .Fields(FIELD_PROPERTY_TENANTS_IMPROVEMENT).Value, .Fields(BuildingValuationField).Value,\n\n                                                           .Fields(BuildingClassCodeField).Value, .Fields(BuildingCauseOfLossField).Value)\n\n                    End If\n\n                    If String.IsNullOrWhiteSpace(.Fields(BuildingValuationField).Value) Then\n\n                        .Fields(BuildingValuationField).Value = DEFAULT_VALUE_1\n\n                    End If\n\n                    If .Fields(BuildingEarthQuakeRateTypeField).Value.CL_EqualsYesAbbreviation() Then\n\n                        .Fields(PropertyFieldBuildingEarthQuakeLimit).Value = .Fields(FIELD_PROPERTY_BUILDING_LIMIT).Value\n\n                    End If\n\n                    _oLobPFBd.SetDefaultValues(_oLobData, _oLobLoc)\n\n                    If .Fields(BuildingCauseOfLossField).Value.CL_ToDouble() >= 6 Then\n\n                        _oLobPFBd.DeleteEqSpkl(_oLobLoc)\n\n                    Else\n\n                        _oLobPFBd.DeleteEQ(_oLobLoc)\n\n                    End If\n\n                    ResetBuildingCappingIndicator()\n\n                ElseIf .Fields(InputFieldBuilding).Value.CL_ToDouble() > 0 Then\n\n                    .Fields(InputFieldBuilding).Value = \"0\"\n\n                    _oLobPFBd.DeleteData(_oLobLoc)\n\n                End If\n\n            End With\n\n",
    "S73": "            Dim businessIncome As New SIGI.CLAS.BusinessServices.LobPF.PFBi\n\n",
    "S74": "            Dim isCoverageDeleted As Boolean = False\n\n",
    "S75": "            Dim businessIncomeCoverageCount As Integer = 0\n\n",
    "G93": "            With _oLobLoc.Input\n\n                If pnlBI.Selected Then\n\n                    .Fields(\"PFCovBIEESelect\").Value = COVERAGE_SELECTED\n\n                    businessIncomeCoverageCount = 1\n\n                ElseIf ((.Fields(\"PFCovBIEESelect\").Value.CL_ToDouble) > 0) AndAlso (pnlBI.Selected = False) Then\n\n                    isCoverageDeleted = True\n\n                    .Fields(\"PFCovBIEESelect\").Value = COVERAGE_DESELECTED\n\n                End If\n\n                If pnlBiALS.Selected Then\n\n                    .Fields(\"PFCovBIAlsSelect\").Value = COVERAGE_SELECTED\n\n                    businessIncomeCoverageCount = 1\n\n                ElseIf ((.Fields(\"PFCovBIAlsSelect\").Value.CL_ToDouble) > 0) AndAlso (pnlBiALS.Selected = False) Then\n\n                    isCoverageDeleted = True\n\n                    .Fields(\"PFCovBIAlsSelect\").Value = COVERAGE_DESELECTED\n\n                End If\n\n                If pnlBiLR.Selected Then\n\n                    businessIncomeCoverageCount = 1\n\n                ElseIf (.Fields(\"PFCovBiLRSelect\").Value.CL_ToDouble > 0) Then\n\n                    isCoverageDeleted = True\n\n                End If\n\n                If pnlBiNoEE.Selected Then\n\n                    .Fields(\"PFCovBINoEESelect\").Value = COVERAGE_SELECTED\n\n                    businessIncomeCoverageCount = 1\n\n                ElseIf ((.Fields(\"PFCovBINoEESelect\").Value.CL_ToDouble) > 0) AndAlso (pnlBiNoEE.Selected = False) Then\n\n                    isCoverageDeleted = True\n\n                    .Fields(\"PFCovBINoEESelect\").Value = COVERAGE_DESELECTED\n\n                End If\n\n                If pnlBiD.Selected Then\n\n                    .Fields(FIELD_PFCOVBIDPSELECT).Value = COVERAGE_SELECTED\n\n                    businessIncomeCoverageCount = 1\n\n                ElseIf ((.Fields(FIELD_PFCOVBIDPSELECT).Value.CL_ToDouble) > 0) AndAlso (pnlBiD.Selected.Equals(False)) Then\n\n                    .Fields(FIELD_PFCOVBIDPSELECT).Value = COVERAGE_DESELECTED\n\n                    If _oLobData.Policy.Input(FIELD_PFELITEPAC2015APPLY).Value.CL_EqualsYesAbbreviation() Then\n\n                        DeleteDependantProperties(_oLobLoc)\n\n                    Else\n\n                        isCoverageDeleted = True\n\n                    End If\n\n                End If\n\n                If (isCoverageDeleted) OrElse (businessIncomeCoverageCount = 0) Then\n\n                    businessIncome.DeleteData(_oLobLoc)\n\n                End If\n\n            End With\n\n            SaveBusinessIncomeCoverage()\n\n",
    "S76": "            Dim businessIncome As New SIGI.CLAS.BusinessServices.LobPF.PFBi\n\n",
    "G94": "            With _oLobLoc.Input\n\n                If pnlBiD.Selected OrElse pnlBiNoEE.Selected OrElse pnlBI.Selected Then\n\n                    If pnlBI.Selected Then\n.Fields(\"PfBincExclEe\").Value = BUSINESS_INCOME_EXTRA_EXPENSE\n\n\n End If\n\n                    If pnlBiD.Selected AndAlso _oLobData.Policy.Input(\"PFElitePac2015Apply\").Value.CL_EqualsYesAbbreviation() AndAlso\n\n                        .Fields(\"PfBIDPBincClass\").Value.Trim.Length().Equals(0) Then\n\n                        .Fields(\"PfBIDPBincClass\").Value = .Fields(\"PfLocClass\").Value.Trim()\n\n                    End If\n\n                    businessIncome.SetDefaultValuesEQ(_oLobLoc, _oLobData.Policy.Input(\"PfCopRate\").Value.Trim)\n\n                End If\n\n                If pnlBiALS.Selected Then\n\n                    .Fields(\"PfBincExclEe\").Value = BUSINESS_INCOME_ACTUAL_LOSS_SUSTAINED\n\n                    businessIncome.SetDefaultsBiALS(_oLobData.Attributes, _oLobLoc, _oLobData.Policy.Input(PROPERTY_FIELD_PFPOLBIALSAPPLYIND).Value.CL_EqualsYesAbbreviation())\n\n                    If .Fields(\"PfBincClass\").Value.Trim.Length().Equals(0) Then\n.Fields(\"PfBincClass\").Value = .Fields(\"PfLocClass\").Value.Trim()\n\n\n End If\n\n                    If String.IsNullOrWhiteSpace(.Fields(\"PfBincType\").Value) Then\n.Fields(\"PfBincType\").Value = BIALS_RISK_DEFAULT\n\n\n End If\n\n                    If (_oLobData.Policy.Input(\"PFPolBIALSApplyInd\").Value.CL_EqualsYesAbbreviation() AndAlso\n\n                    String.IsNullOrWhiteSpace(.Fields(\"PfBincLim\").Value)).Equals(False) Then\n\n                        businessIncome.SetDefaultValuesEQ(_oLobLoc, _oLobData.Policy.Input(\"PfCopRate\").Value.Trim)\n\n                    Else\n\n                        businessIncome.SetActualLossSustainedEarthQuakeValues(_oLobLoc, _oLobData.Policy.Input(\"PfCopRate\").Value.Trim)\n\n                    End If\n\n                End If\n\n            End With\n\n",
    "S77": "            Dim oTU As New SIGI.CLAS.BusinessServices.LobPF.PFTu\n\n",
    "S78": "            Dim deleteCov As Boolean = False\n\n",
    "S79": "            Dim nBICovCount As Integer\n\n",
    "G95": "            nBICovCount = 0\n\n            With _oLobLoc.Input\n\n                If pnlTu.Selected = True Then\n\n                    .Fields(\"PFCovTuSelect\").Value = \"1\"\n\n                    nBICovCount = 1\n\n                ElseIf (Val(.Fields(\"PFCovTuSelect\").Value) > 0) And (pnlTu.Selected = False) Then\n\n                    deleteCov = True\n\n                    .Fields(\"PFCovTuSelect\").Value = \"0\"\n\n                End If\n\n                If pnlTUnoEE.Selected = True Then\n\n                    .Fields(\"PFCovTUnoEESelect\").Value = \"1\"\n\n                    nBICovCount = 1\n\n                ElseIf (Val(.Fields(\"PFCovTUnoEESelect\").Value) > 0) And (pnlTUnoEE.Selected = False) Then\n\n                    deleteCov = True\n\n                    .Fields(\"PFCovTUnoEESelect\").Value = \"0\"\n\n                End If\n\n            End With\n\n            If (deleteCov = True) Or (nBICovCount = 0) Then\n\n                oTU.DeleteData(_oLobLoc)\n\n            End If\n\n",
    "G96": "            With _oLobLoc.Input\n\n",
    "S80": "                Dim BPP As New SIGI.CLAS.BusinessServices.LobPF.PFBpp\n\n",
    "S81": "                Dim PFLimits As String = String.Empty\n\n",
    "S82": "                Dim PFLimits1 As Integer = 0\n\n",
    "S83": "                Dim RateGroup As String = String.Empty\n\n",
    "G97": "                If pnlBPP.Selected Then\n\n                    If ((_oLobLoc.Input.Fields(\"PFLOIEffectiveInd\").Value.Equals(\"Y\") AndAlso\n\n                         New HashSet(Of String)() From {\"NBIS\", \"NBQU\", \"PCNM\", \"REIS\", \"REQU\"}.Contains(_oLobData.Attributes.Common.PolicyTransactionType)) OrElse\n\n                        (_oLobData.Attributes.Common.PolicyTransactionType.Equals(\"PCNM\") AndAlso\n\n                         _oShared2.SupportIsInEffect(\"PFLOI\", Date.ParseExact(_oLobData.Attributes.Common.PolicyTransEffectiveDate, \"MMddyy\", Nothing)) AndAlso\n\n                         .Fields(\"PfLocSt\").Value.Equals(\"DC\") = False)) AndAlso\n\n                        String.IsNullOrWhiteSpace(.Fields(\"PfBppLim1\").Value) Then\n\n                        .Fields(\"PFBP1BG1CAPIND\").Value = \"N\"\n\n                        .Fields(\"PFBP1BG2CAPIND\").Value = \"N\"\n\n                        .Fields(\"PFBP1COLCAPIND\").Value = \"N\"\n\n                    End If\n\n                    .Fields(\"PFCovBppSelect\").Value = \"1\"\n\n                ElseIf (StringToDouble(.Fields(\"PFCovBppSelect\").Value) > 0) AndAlso pnlBPP.Selected = False Then\n\n                    BPP.DeleteData(_oLobLoc)\n\n                    .Fields(\"PFCovBppSelect\").Value = \"0\"\n\n                End If\n\n                If .Fields(\"PFCovBppSelect\").Value.Equals(\"1\") Then\n\n                    If _sProgCode.Equals(\"08\") AndAlso (.Fields(\"PfBgiRateTyp\").Value.Trim.Equals(\"5\")) AndAlso\n\n                      (GrgJul(_oLobData.Attributes.Common.PolicyEffectiveDate) > 106334) Then\n\n                        If .Fields(\"PfBppClassCd\").ValComOut = 0 Then\n\n                            BPP.SetDefaultValuesBPP(_oLobData)\n\n                            .Fields(\"PfBppClassCd\").Value = String.Empty\n\n                            If _oLobData.Attributes(\"PFQuikRateVals\").Trim.Length > 0 Then\n\n                                .Fields(\"PfBppValueOne\").Value = VALUATION_DEFAULT  ' Replacement Cost\n\n                                BPP.SetDefaultValuesSpecialTheft(_sInstanceId, _oLobData.Attributes,\n\n                                                     _oLobLoc, _oCOData.Policy(\"CpPolType\").Value)\n\n                            End If\n\n                        End If\n\n                    End If\n\n                    If _oLobData.Attributes.Common.OneNDoneInd.Equals(\"Y\") Then\n\n                        BPP.SetDefaultValuesBppOneNDone(_oLobData.Attributes.Common.OneNDoneInd,\n\n                                                        _oLobData.Attributes.Common.OneNDoneType,\n\n                                                        .Fields(\"PfBppTyp1\").Value,\n\n                                                        .Fields(\"PfBppValueone\").Value,\n\n                                                        .Fields(\"PfBppClassCd\").Value)\n\n                    End If\n\n                    If .Fields(\"PfBppClassCd\").Value.Trim.Length = 0 Then\n\n                        If New HashSet(Of String)() From {\"0433\", \"0434\", \"0581\", \"0582\", \"1150\"}.Contains(.Fields(\"PfLocClass\").Value.Trim) = False Then\n\n                            .Fields(\"PfBppClassCd\").Value = .Fields(\"PfLocClass\").Value\n\n                        End If\n\n",
    "S84": "                        Dim PfBppSpclRg As String = .Fields(\"PfBppSpclRg\").Value.Trim\n\n",
    "G98": "                        If String.IsNullOrWhiteSpace(PfBppSpclRg) = False Then\n\n                            If PfBppSpclRg.Length = 1 Then\n\n                                .Fields(\"PfBppSpclRg\").Value = String.Concat(\"0\", PfBppSpclRg)\n\n                            Else\n\n                                .Fields(\"PfBppSpclRg\").Value = PfBppSpclRg\n\n                            End If\n\n                            .Fields(\"PfBppSpclCllim\").Value = .Fields(\"PfBppSpclCllim\").Value\n\n                        Else\n\n                            If Integer.TryParse(.Fields(\"PfLocClassId\").Value.Trim, PFLimits1) Then\n\n                                BPP.GetClassCodeRateGroupAndLimits(PFLimits1, RateGroup, PFLimits)\n\n                                If PfBppSpclRg.Length = 1 Then\n\n                                    .Fields(\"PfBppSpclRg\").Value = String.Concat(\"0\", RateGroup)\n\n                                Else\n\n                                    .Fields(\"PfBppSpclRg\").Value = RateGroup\n\n                                End If\n\n                                .Fields(\"PfBppSpclCllim\").Value = PFLimits\n\n                            End If\n\n                        End If\n\n                    End If\n\n                    If New HashSet(Of String)() From {\"0701\", \"0702\"}.Contains(.Fields(\"PfBppClassCd\").Value.Trim) AndAlso\n\n                         String.IsNullOrWhiteSpace(.Fields(\"PfBppRtGroup\").Value) Then\n\n                        .Fields(\"PfBppRtGroup\").Value = \"A\"\n\n                    End If\n\n                    If .Fields(\"PfBppTyp1\").Value.Trim.Length = 0 Then\n\n                        .Fields(\"PfBppTyp1\").Value = BPP_TYPE_DEFAULT\n\n                    End If\n\n                    If .Fields(\"PfBppValueone\").Value.Trim.Length = 0 Then\n\n                        .Fields(\"PfBppValueone\").Value = VALUATION_DEFAULT\n\n                    End If\n\n                    BPP.SetDefaultValues(_oLobData, _oCOData)\n\n                    BPP.SetDefaultValuesBppEq(_oLobData)\n\n                End If\n\n            End With\n\n",
    "S85": "            Dim activeLocation As String = _oLobData.Attributes(\"ActiveLOBLocation\")\n\n",
    "S86": "            Dim policyTransactionType As String = _oCOData.Attributes.Common.PolicyTransactionType\n\n",
    "S87": "            Dim transactionList As New HashSet(Of String) From {\n\n",
    "G99": "                getTransactionType(NewBusinessQuote), getTransactionType(NewBusinessIssue),\n\n                getTransactionType(RenewalConversionQuote), getTransactionType(RenewalConversionIssue),\n\n                getTransactionType(RenewalQuote), getTransactionType(RenewalIssue)}\n\n            _sState = activeLocation.CL_Mid(1, 2)\n\n            _sLocNo = activeLocation.CL_Mid(3, 3)\n\n            _sBldgNo = activeLocation.CL_Mid(6, 3)\n\n            _oLobLoc = _oLobData.Locations.Item(_sState, _sLocNo, _sBldgNo)\n\n            _nvcCoveragesOnLoc = _oLobBus.GetCovsOnLoc(_oLobLoc)\n\n            If transactionList.Contains(policyTransactionType) Then\n\n                _oLobBusShared.SetPFLOIEffectiveInd(_oLobData, _oLobLoc)\n\n            End If\n\n            SaveCoverageBuilding()\n\n            SaveCoverageBPP()\n\n            SaveCoverageBI()\n\n            SaveCoverageTU()\n\n            SaveBusinessIncomeLandLordCoverage()\n\n            SaveExtraExpenseCoverage()\n\n            SaveSpecialClassesCoverage()\n\n            SaveLossAssessmentOrMiscPropertyCoverage()\n\n            SaveOffPremisesUtilityCoverage()\n\n            SaveSpoilageCoverage()\n\n            SaveTenantsImprovementCoverage()\n\n            SaveBuildingLegalLiabilityCoverage()\n\n            SavePersonalLegalLiabilityCoverage()\n\n            SaveLocISO2008()\n\n            SaveAltPowerInd()\n\n            SaveDebrisRemovalCoverage()\n\n            SaveSinkHoleLossCoverage()\n\n",
    "S88": "            Dim policyEffectiveDate As String = _oCOData.Attributes.Common.PolicyEffectiveDate\n\n",
    "G100": "            If IsRuleApplicable(policyEffectiveDate, _oLobLoc.StateCode, SinkHoleLossCoverage) Then\n\n",
    "S89": "                Dim pfLocation As New LobPF.PfLoc\n\n",
    "S90": "                Dim isSinkHoleSelectedOnRecord As Boolean = _oLobLoc.Input.Fields(SinkHoleLossCoverageIndicator).Value.CL_EqualsYesAbbreviation()\n\n",
    "G101": "                If pnlPfSinkHoleLoss.Selected Then\n\n                    If isSinkHoleSelectedOnRecord.Equals(False) Then\n\n                        pfLocation.SetSinkHoleLossAcrossState(_oLobData.Locations, policyEffectiveDate, Status.YES_ABBREVIATED)\n\n                    End If\n\n                    _oLobLoc.Input.Fields(SinkHoleLossCoverageIndicator).Value = Status.YES_ABBREVIATED\n\n                Else\n\n                    If isSinkHoleSelectedOnRecord Then\n\n                        pfLocation.SetSinkHoleLossAcrossState(_oLobData.Locations, policyEffectiveDate, Status.NO_ABBREVIATED)\n\n                    End If\n\n                    _oLobLoc.Input.Fields(SinkHoleLossCoverageIndicator).Value = Status.NO_ABBREVIATED\n\n                End If\n\n            End If\n\n",
    "G102": "            With _oLobLoc.Input\n\n                If pnlPfDebrisRemovalAdditionalInsurance.Selected Then\n\n                    .Fields(DebrisRemovalCoverageLimit).Value = RemoveCommas(txtPfDebrisRemovalLimit.Text.Trim())\n\n                Else\n\n                    .Fields(DebrisRemovalCoverageLimit).Value = String.Empty\n\n                End If\n\n            End With\n\n",
    "G103": "            With _oLobLoc.Input\n\n                If pnlLglLiabPP.Selected Then\n\n                    .Fields(PersonalLegalLiabilityCoverageIndicator).Value = DEFAULT_VALUE_1\n\n                ElseIf (_oLobLoc.Input.Fields(PersonalLegalLiabilityCoverageIndicator).Value.CL_ToDouble) > 0 Then\n\n                    _oLobBusShared.DeleteDataLegalLiability(_oLobLoc, GenerateDependentPropertiesList(COVERAGE_TYPE_LEGAL_LIABILITY_PERSONAL_PROPERTY))\n\n                    .Fields(PersonalLegalLiabilityCoverageIndicator).Value = String.Empty\n\n                End If\n\n            End With\n\n",
    "G104": "            With _oLobLoc.Input\n\n                If pnlFireLgl.Selected Then\n\n                    .Fields(BuildingLegalLiabilityCoverageIndicator).Value = DEFAULT_VALUE_1\n\n                ElseIf (.Fields(BuildingLegalLiabilityCoverageIndicator).Value.CL_ToDouble) > 0 Then\n\n                    If _oLobData.Policy.Input(FIELD_PFISO2012MULTISTATE).Value.CL_EqualsYesAbbreviation Then\n\n                        _oLobBusShared.DeleteDataLegalLiability(_oLobLoc, GenerateDependentPropertiesList(COVERAGE_TYPE_FIRE))\n\n                    Else\n\n",
    "S91": "                        Dim PFBd As New SIGI.CLAS.BusinessServices.LobPF.PFBd\n\n",
    "G105": "                        PFBd.DeleteData(_oLobLoc)\n\n                    End If\n\n                    .Fields(BuildingLegalLiabilityCoverageIndicator).Value = String.Empty\n\n                End If\n\n            End With\n\n",
    "G106": "            With _oLobLoc.Input\n\n                If pnlTnts.Selected Then\n\n                    .Fields(TenantsImprovementCoverageIndicator).Value = DEFAULT_VALUE_1\n\n                    ResetBuildingCappingIndicator()\n\n                ElseIf (.Fields(TenantsImprovementCoverageIndicator).Value.CL_ToDouble) > 0 Then\n\n",
    "S92": "                    Dim PFBd As New SIGI.CLAS.BusinessServices.LobPF.PFBd\n\n",
    "G107": "                    PFBd.DeleteData(_oLobLoc)\n\n                    .Fields(TenantsImprovementCoverageIndicator).Value = String.Empty\n\n                End If\n\n            End With\n\n",
    "G108": "            With _oLobLoc.Input\n\n                If pnlSpoil.Selected Then\n\n                    .Fields(SpoilageCoverageIndicator).Value = DEFAULT_VALUE_1\n\n                ElseIf (_oLobLoc.Input.Fields(SpoilageCoverageIndicator).Value.CL_ToDouble) > 0 Then\n\n",
    "S93": "                    Dim PFSpoil As New SIGI.CLAS.BusinessServices.LobPF.PFSpoil\n\n",
    "G109": "                    PFSpoil.DeleteData(_oLobLoc)\n\n                    .Fields(SpoilageCoverageIndicator).Value = String.Empty\n\n                End If\n\n            End With\n\n",
    "G110": "            With _oLobLoc.Input\n\n                If pnlOffPrem.Selected Then\n\n                    .Fields(OffPremisesUtilityCoverageIndicator).Value = DEFAULT_VALUE_1\n\n                ElseIf (.Fields(OffPremisesUtilityCoverageIndicator).Value.CL_ToDouble) > 0 Then\n\n",
    "S94": "                    Dim PFOffPrm As New SIGI.CLAS.BusinessServices.LobPF.PFOffPrm\n\n",
    "G111": "                    PFOffPrm.DeleteData(_oLobLoc)\n\n                    .Fields(OffPremisesUtilityCoverageIndicator).Value = String.Empty\n\n                End If\n\n            End With\n\n",
    "G112": "            With _oLobLoc.Input\n\n                If pnlLaMr.Selected Then\n\n                    .Fields(LossAssessmentOrMiscPropertyCoverageIndicator).Value = DEFAULT_VALUE_1\n\n                ElseIf (.Fields(LossAssessmentOrMiscPropertyCoverageIndicator).Value.CL_ToDouble) > 0 Then\n\n",
    "S95": "                    Dim PFLaMr As New SIGI.CLAS.BusinessServices.LobPF.PFLaMr\n\n",
    "G113": "                    PFLaMr.DeleteData(_oLobLoc)\n\n                    .Fields(LossAssessmentOrMiscPropertyCoverageIndicator).Value = String.Empty\n\n                End If\n\n            End With\n\n",
    "G114": "            With _oLobLoc.Input\n\n                If pnlSpec.Selected Then\n\n                    .Fields(SpecialClassesCoverageIndicator).Value = DEFAULT_VALUE_1\n\n                ElseIf (.Fields(SpecialClassesCoverageIndicator).Value.CL_ToDouble) > 0 Then\n\n",
    "S96": "                    Dim PFSpecList As New SIGI.CLAS.BusinessServices.LobPF.PFSpecList\n\n",
    "G115": "                    PFSpecList.DelAllSpecCoverages(_oLobData.SpecialCoverages, _oLobLoc)\n\n                    .Fields(SpecialClassesCoverageIndicator).Value = String.Empty\n\n                End If\n\n            End With\n\n",
    "G116": "            With _oLobLoc.Input\n\n                If pnlExExps.Selected Then\n\n                    .Fields(FIELD_PFCOVEXEXPSSELECT).Value = DEFAULT_VALUE_1\n\n                ElseIf (.Fields(FIELD_PFCOVEXEXPSSELECT).Value.CL_ToDouble) > 0 Then\n\n",
    "S97": "                    Dim PFExExps As New SIGI.CLAS.BusinessServices.LobPF.PFExExps\n\n",
    "G117": "                    PFExExps.DeleteData(_oLobLoc)\n\n                    .Fields(FIELD_PFCOVEXEXPSSELECT).Value = String.Empty\n\n                End If\n\n            End With\n\n",
    "S98": "            Dim isPfIso2008Platform = _oLobBusShared.checkISO2008(_oCOData.Attributes.Common.PolicyEffectiveDate, _oCOData.Attributes.Common.PredominantState)\n\n",
    "G118": "            With _oLobLoc.Input\n\n                If pnlBiLR.Selected Then\n\n                    .Fields(BusinessIncomeLandLordCoverageIndicator).Value = DEFAULT_VALUE_1\n\n                ElseIf ((.Fields(BusinessIncomeLandLordCoverageIndicator).Value.CL_ToDouble) > 0 OrElse isPfIso2008Platform.Equals(False)) Then\n\n",
    "S99": "                    Dim PFBiLR As New SIGI.CLAS.BusinessServices.LobPF.PFBiLR\n\n",
    "G119": "                    PFBiLR.DeleteData(_oLobLoc)\n\n                    .Fields(BusinessIncomeLandLordCoverageIndicator).Value = String.Empty\n\n                End If\n\n            End With\n\n",
    "G120": "            With _oLobLoc.Input\n\n",
    "S100": "                Dim isPfLimitOfInsuranceApply As Boolean = .Fields(FIELD_PFLOIEFFECTIVEIND).Value.CL_EqualsYesAbbreviation()\n\n",
    "S101": "                Dim policyTransactionType As String = _oCOData.Attributes.Common.PolicyTransactionType\n\n",
    "S102": "                Dim transactionList As New HashSet(Of String) From {\n\n",
    "G121": "                        getTransactionType(NewBusinessQuote), getTransactionType(NewBusinessIssue),\n\n                        getTransactionType(ChangeEndorsement),\n\n                        getTransactionType(RenewalQuote), getTransactionType(RenewalIssue)}\n\n                If ((isPfLimitOfInsuranceApply AndAlso transactionList.Contains(policyTransactionType)) OrElse\n\n                        (policyTransactionType.Equals(getTransactionType(ChangeEndorsement), StringComparison.CurrentCultureIgnoreCase) AndAlso\n\n                         _oShared2.SupportIsInEffect(\"PFLOI\", Date.ParseExact(_oLobData.Attributes.Common.PolicyTransEffectiveDate, DATE_FORMAT_MMDDYY, Nothing)) AndAlso\n\n                         .Fields(FIELD_LOCATION_STATE).Value.Equals(getStateCode(States.DistrictOfColumbia)) = False)) AndAlso\n\n                        String.IsNullOrWhiteSpace(.Fields(FIELD_PROPERTY_BUILDING_LIMIT).Value) Then\n\n                    .Fields(BuildingBasicGropOneCappingIndicator).Value = Status.NO_ABBREVIATED\n\n                    .Fields(BuildingBasicGropTwoCappingIndicator).Value = Status.NO_ABBREVIATED\n\n                    .Fields(BuildingBasicGropCauseOfLossCappingIndicator).Value = Status.NO_ABBREVIATED\n\n                End If\n\n            End With\n\n",
    "G122": "            With _oLobLoc.Input\n\n                If pnlPfAddInsBldgOwn.Selected = True Then\n\n                    .Fields(\"PfAddInsBldgOwnInd\").Value = \"Y\"\n\n                Else\n\n                    .Fields(\"PfAddInsBldgOwnInd\").Value = \"N\"\n\n                End If\n\n                If pnlPfLossPay.Selected Then\n\n                    .Fields(\"PfLossPayInd\").Value = \"Y\"\n\n                Else\n\n                    .Fields(\"PfLossPayInd\").Value = \"N\"\n\n                End If\n\n                If pnlPfCondoAssoc.Selected Then\n\n                    .Fields(\"PfCondoAssocInd\").Value = \"Y\"\n\n                Else\n\n                    .Fields(\"PfCondoAssocInd\").Value = \"N\"\n\n                End If\n\n                If pnlPfCondoCmmlUnt.Selected Then\n\n                    .Fields(\"PfCondoCmmlUntInd\").Value = \"Y\"\n\n                Else\n\n                    .Fields(\"PfCondoCmmlUntInd\").Value = \"N\"\n\n                End If\n\n            End With\n\n",
    "G123": "            If _oLobLoc.Input.Fields(\"PfEBAltPowerInd\").Value.Trim = \"\" Or _\n\n               _oLobLoc.Input.Fields(\"PfEBAltPowerInd\").Value.Trim = \"I\" Then\n\n                If _oLobBus.isEBAltPowerRequired(_oLobData) = True Then\n\n                    _oLobLoc.Input.Fields(\"PfEBAltPowerInd\").Value = \"I\"\n\n                Else\n\n                    If _oLobLoc.Input.Fields(\"PfEBAltPowerInd\").Value.Trim = \"I\" Then\n\n                        _oLobLoc.Input.Fields(\"PfEBAltPowerInd\").Value = \"\"\n\n                    End If\n\n                End If\n\n            End If\n\n",
    "S103": "            Dim buildingSelected As Boolean = False\n\n",
    "G124": "            PMCoverageSelected = False\n\n            If (_oLobLoc.Input.Fields(\"PFCovBldgSelect\").Value.CL_ToDouble) > 0 OrElse\n\n            ((_oLobLoc.Input.Fields(\"PfBldgLim\").Value.CL_ToDouble) > 0 AndAlso\n\n             String.IsNullOrWhiteSpace(_oLobLoc.Input.Fields(\"PfTntImprv\").Value)) Then\n\n                PMCoverageSelected = True\n\n                buildingSelected = True\n\n            End If\n\n            If (_oLobLoc.Input.Fields(\"PFCovBppSelect\").Value.CL_ToDouble) > 0 OrElse\n\n            (_oLobLoc.Input.Fields(\"PfBppLim1\").Value.CL_ToDouble) > 0 Then\n\n                PMCoverageSelected = True\n\n            End If\n\n            If (_oLobLoc.Input.Fields(\"PFCovLglPPSelect\").Value.CL_ToDouble) > 0 OrElse\n\n            (_oLobLoc.Input.Fields(\"PfLLBppLim\").Value.CL_ToDouble) > 0 Then\n\n                PMCoverageSelected = True\n\n            End If\n\n            If _oLobData.Policy.Input(FIELD_PFISO2012MULTISTATE).Value.CL_EqualsNoAbbreviation() Then\n\n                If (_oLobLoc.Input.Fields(\"PFCovFireLglSelect\").Value.CL_ToDouble) > 0 OrElse\n\n                ((_oLobLoc.Input.Fields(\"PfBldgLim\").Value.CL_ToDouble) > 0 AndAlso\n\n                _oLobLoc.Input.Fields(\"PfTntImprv\").Value.Trim().Equals(TENANT_IMPROVEMENT)) Then\n\n                    PMCoverageSelected = True\n\n                    buildingSelected = True\n\n                End If\n\n            Else\n\n                If (_oLobLoc.Input.Fields(\"PFCovFireLglSelect\").Value.CL_ToDouble) > 0 OrElse\n\n                (_oLobLoc.Input.Fields(\"PfLLBldgLim\").Value.CL_ToDouble) > 0 Then\n\n                    PMCoverageSelected = True\n\n                End If\n\n            End If\n\n            If (_oLobLoc.Input.Fields(\"PFCovTntsSelect\").Value.CL_ToDouble) > 0 OrElse\n\n            ((_oLobLoc.Input.Fields(\"PfBldgLim\").Value.CL_ToDouble) > 0 AndAlso\n\n            _oLobLoc.Input.Fields(\"PfTntImprv\").Value.Trim().CL_EqualsYesAbbreviation) Then\n\n                PMCoverageSelected = True\n\n                buildingSelected = True\n\n            End If\n\n            If buildingSelected = False Then\n\n                If (_oLobLoc.Input.Fields(\"PFCovBIAlsSelect\").Value.CL_ToDouble) > 0 OrElse\n\n                ((_oLobLoc.Input.Fields(\"PfBincLim\").Value.CL_ToDouble) > 0 AndAlso\n\n                _oLobLoc.Input.Fields(\"PfBincExclEe\").Value.Trim().Equals(BUSINESS_INCOME_ACTUAL_LOSS_SUSTAINED)) Then\n\n                    PMCoverageSelected = True\n\n                End If\n\n                If (_oLobLoc.Input.Fields(\"PFCovBIEESelect\").Value.CL_ToDouble) > 0 OrElse\n\n                (_oLobLoc.Input.Fields(\"PfBincLim\").ValComOut + _oLobLoc.Input.Fields(\"PfBincExpoOne\").ValComOut + _oLobLoc.Input.Fields(\"PfBincExpoTwo\").ValComOut > 0 AndAlso\n\n                _oLobLoc.Input.Fields(\"PfBincExclEe\").Value.Trim().CL_EqualsNoAbbreviation) Then\n\n                    PMCoverageSelected = True\n\n                End If\n\n                If (_oLobLoc.Input.Fields(\"PFCovBINoEESelect\").Value.CL_ToDouble) > 0 OrElse\n\n                (_oLobLoc.Input.Fields(\"PfBincLim\").ValComOut + _oLobLoc.Input.Fields(\"PfBincExpoOne\").ValComOut + _oLobLoc.Input.Fields(\"PfBincExpoTwo\").ValComOut > 0 AndAlso\n\n                _oLobLoc.Input.Fields(\"PfBincExclEe\").Value.Trim().CL_EqualsYesAbbreviation) Then\n\n                    PMCoverageSelected = True\n\n                End If\n\n                If (_oLobLoc.Input.Fields(\"PFCovTuSelect\").Value.CL_ToDouble) > 0 OrElse\n\n                ((_oLobLoc.Input.Fields(\"PfTuitClassCd\").Value.CL_ToDouble) > 0 AndAlso\n\n                _oLobLoc.Input.Fields(\"PfTuitExclEe\").Value.Trim().CL_EqualsYesAbbreviation = False) Then\n\n                    PMCoverageSelected = True\n\n                End If\n\n                If (_oLobLoc.Input.Fields(\"PFCovTUnoEESelect\").Value.CL_ToDouble) > 0 OrElse\n\n                ((_oLobLoc.Input.Fields(\"PfTuitClassCd\").Value.CL_ToDouble) > 0 AndAlso\n\n                _oLobLoc.Input.Fields(\"PfTuitExclEe\").Value.Trim().CL_EqualsYesAbbreviation) Then\n\n                    PMCoverageSelected = True\n\n                End If\n\n                If (_oLobLoc.Input.Fields(\"PFCovExExpsSelect\").Value.CL_ToDouble) > 0 OrElse\n\n                (_oLobLoc.Input.Fields(\"PfExxpLim\").Value.CL_ToDouble) > 0 Then\n\n                    PMCoverageSelected = True\n\n                End If\n\n            End If\n\n",
    "S104": "            Dim returnMarkup As String = String.Format(\"<ul style='position:absolute;right:6px'><li><a id='{0}' onclick='{1}();'><b> Edit</b></a></li></ul>\", elementId, onClick)\n\n",
    "G125": "            If isIncomplete Then\n\n                returnMarkup &= \"<img class='incompleteItem' src='/WebApplications/CLAS/PolicyWriting2/ClientShared/Theme_9/images/icon_required.png'></img>\"\n\n            End If\n\n            Return returnMarkup\n\n",
    "G126": "            Page.Redirect(Me.PreviousPageURL)\n\n",
    "S105": "            Dim currentKey As String = String.Empty\n\n",
    "S106": "            Dim redirectionUrl As String = String.Empty\n\n",
    "G127": "            _oCOData = New BusinessServices.LobCO.PolicyData(_sQtPolNum, _sInstanceId, BasePolicyData.LoadType.Session)\n\n            _oLobData = New BusinessServices.LobPF.PolicyData(_sQtPolNum, _sInstanceId, BasePolicyData.LoadType.Session)\n\n",
    "S107": "            Dim saveDataSuccess As Boolean = SaveData()\n\n",
    "G128": "            If saveDataSuccess AndAlso _oLobData.Policy.Input.Fields(PROPERTY_LOCATION_PROMETRIX_INDICATOR).Value.CL_EqualsYesAbbreviation AndAlso\n\n                _oLobLoc.Input.Fields(LOCATION_PROMETRIX_STATUS).Value.Trim.Equals(PROMETRIX_DOWNTIME) = False Then\n\n                redirectionUrl = DASHBOARD_URL\n\n",
    "S108": "                Dim sProMetrix As sProMetrixReturn = _oLobBusShared.ProMetrixApplicable(_oLobLoc, _oLobData, _oCOData, _oValidationResults, String.Empty, redirectionUrl, 2)\n\n",
    "G129": "                If sProMetrix.ReturnProMetrix = ProMetrixReturn.Failure Then\n\n                    saveDataSuccess = False\n\n                ElseIf sProMetrix.ReturnProMetrix = ProMetrixReturn.Schedule Then\n\n                    _oCOData.Commit()\n\n                    _oLobData.Commit()\n\n                    Redirect(sProMetrix.EditURL)\n\n                End If\n\n            End If\n\n            If saveDataSuccess Then\n  'Commit is in SaveData\n\n                SetNavigationPageStatusComplete(currentKey)\n\n                With _oLobData.Attributes\n\n                    .Collections(LOB_NAVIGATION) = Nothing\n\n                    .Common.WalkThruStartPage = String.Empty\n\n                End With\n\n                With _oLobLoc.Input\n\n                    If .Fields(LOCATION_PROMETRIX_STATUS).Value.Trim.Equals(PROMETRIX_DOWNTIME) Then\n\n                        .Fields(LOCATION_PROMETRIX_STATUS).Value = String.Empty\n\n                    End If\n\n                End With\n\n                AssignDmPrefillPrometrixFields()\n\n                SetACORDImpAttributes(_oLobData.Attributes)\n\n                _oLobData.Commit()\n\n                _oCOData.Commit()\n\n                Redirect(DASHBOARD_URL)\n\n            Else\n\n                AddErrorsToPage(_oValidationResults)\n\n                SetupPagePresentation()\n\n                _oValidationResults.ClearAllErrors()\n\n                _oCOData.SetSession()\n\n                _oLobData.SetSession()\n\n            End If\n\n",
    "S109": "            Dim currentKey As String = String.Empty\n\n",
    "S110": "            Dim redirectionUrl As String = String.Empty\n\n",
    "G130": "            _oCOData = New BusinessServices.LobCO.PolicyData(_sQtPolNum, _sInstanceId, BasePolicyData.LoadType.Session)\n\n            _oLobData = New BusinessServices.LobPF.PolicyData(_sQtPolNum, _sInstanceId, BasePolicyData.LoadType.Session)\n\n",
    "S111": "            Dim saveDataSuccess As Boolean = SaveData()\n\n",
    "G131": "            If saveDataSuccess AndAlso _oLobData.Policy.Input.Fields(PROPERTY_LOCATION_PROMETRIX_INDICATOR).Value.CL_EqualsYesAbbreviation AndAlso\n\n                _oLobLoc.Input.Fields(LOCATION_PROMETRIX_STATUS).Value.Trim.Equals(PROMETRIX_DOWNTIME).Equals(False) Then\n\n                redirectionUrl = RATING_URL\n\n",
    "S112": "                Dim sProMetrix As sProMetrixReturn = _oLobBusShared.ProMetrixApplicable(_oLobLoc, _oLobData, _oCOData, _oValidationResults, String.Empty, redirectionUrl, 2)\n\n",
    "G132": "                If sProMetrix.ReturnProMetrix = ProMetrixReturn.Failure Then\n\n                    saveDataSuccess = False\n\n                ElseIf sProMetrix.ReturnProMetrix = ProMetrixReturn.Schedule Then\n\n                    _oCOData.Commit()\n\n                    _oLobData.Commit()\n\n                    Redirect(sProMetrix.EditURL)\n\n                End If\n\n            End If\n\n            If saveDataSuccess Then\n  'Commit is in SaveData\n\n                SetNavigationPageStatusComplete(currentKey)\n\n                _oLobData.Attributes.Common.WalkThruStartPage = String.Empty\n\n                With _oLobLoc.Input\n\n                    If .Fields(LOCATION_PROMETRIX_STATUS).Value.Trim.Equals(PROMETRIX_DOWNTIME) Then\n\n                        .Fields(LOCATION_PROMETRIX_STATUS).Value = String.Empty\n\n                    End If\n\n                End With\n\n                _oLobData.Attributes.Collections(LOB_NAVIGATION) = Nothing\n\n                SetACORDImpAttributes(_oLobData.Attributes)\n\n                AssignDmPrefillPrometrixFields()\n\n                _oLobData.Commit()\n\n                _oCOData.Commit()\n\n                Redirect(RATING_URL)\n\n            Else\n\n                AddErrorsToPage(_oValidationResults)\n\n                SetupPagePresentation()\n\n                _oValidationResults.ClearAllErrors()\n\n                _oCOData.SetSession()\n\n                _oLobData.SetSession()\n\n            End If\n\n",
    "S113": "            Dim sCurrentKey As String = String.Empty\n\n",
    "S114": "            Dim sHdnValue As String = String.Empty\n\n",
    "S115": "            Dim sWalkthruType As String = String.Empty\n\n",
    "S116": "            Dim sWalkthruStartpage As String = String.Empty\n\n",
    "S117": "            Dim surl5 As String = APPLICATION_ROOT & \"LobPF/PFWalkthruBic.aspx?Level=O&Type=\"\n\n",
    "G133": "            _oCOData = New BusinessServices.LobCO.PolicyData(_sQtPolNum, _sInstanceId, BasePolicyData.LoadType.Session)\n\n            _oLobData = New BusinessServices.LobPF.PolicyData(_sQtPolNum, _sInstanceId, BasePolicyData.LoadType.Session)\n\n            sWalkthruStartpage = _oLobData.Attributes.Common.WalkThruStartPage\n\n            sHdnValue = _oLobData.Attributes.Common.WalkThruAll\n\n            sWalkthruType = _oLobData.Attributes.Common.WalkThruType\n\n",
    "S118": "            Dim sUrl1 As String = String.Concat(surl5, sWalkthruType.Trim, \"&All=\" & sHdnValue)\n\n",
    "G134": "            If _oValidationResults Is Nothing Then\n_oValidationResults = New ErrorCollection()\n\n\n End If\n\n            _bDisableNav = True\n\n",
    "S119": "            Dim sUrl As String = String.Concat(surl5, sWalkthruType.Trim, \"&All=\" & sHdnValue)\n\n",
    "S120": "            Dim bSaveDataSuccess As Boolean = SaveData()\n\n",
    "G135": "            If sWalkthruType.Trim.Equals(WALKTHRU_TYPE_RENEWAL) Then\nsUrl = APPLICATION_ROOT & \"LobPF/PFWalkthruBic.aspx?Level=P&Type=R&All=Y\"\n\n\n End If\n\n            If bSaveDataSuccess AndAlso\n\n            _oLobData.Policy.Input.Fields(PROPERTY_LOCATION_PROMETRIX_INDICATOR).Value.CL_EqualsYesAbbreviation AndAlso\n\n            _oLobLoc.Input.Fields(LOCATION_PROMETRIX_STATUS).Value.Trim.Equals(PROMETRIX_DOWNTIME) = False Then\n\n                SetProMetrixStatus()\n\n                sUrl = sUrl1\n\n",
    "S121": "                Dim sProMetrix As sProMetrixReturn = _oLobBusShared.ProMetrixApplicable(_oLobLoc, _oLobData, _oCOData, _oValidationResults, String.Empty, sUrl, 2)\n\n",
    "G136": "                _oLobData.Attributes.Common.WalkThruStartPage = sWalkthruStartpage\n\n                If sProMetrix.ReturnProMetrix = ProMetrixReturn.Failure Then\n\n                    bSaveDataSuccess = False\n\n                ElseIf sProMetrix.ReturnProMetrix = ProMetrixReturn.Schedule Then\n\n                    _oCOData.Commit()\n\n                    _oLobData.Commit()\n\n                    Redirect(sProMetrix.EditURL)\n\n                End If\n\n            End If\n\n            If bSaveDataSuccess Then\n  'Commit is in SaveData\n\n                SetNavigationPageStatusComplete(sCurrentKey)\n\n                If _oLobLoc.Input.Fields(LOCATION_PROMETRIX_STATUS).Value.Trim.Equals(PROMETRIX_DOWNTIME) Then\n\n                    _oLobLoc.Input.Fields(LOCATION_PROMETRIX_STATUS).Value = String.Empty\n\n                End If\n\n                AssignDmPrefillPrometrixFields()\n\n                _oLobData.Commit()\n\n                _oLobData.SetSession()\n\n                _oCOData.Commit()\n\n                _oCOData.SetSession()\n\n                Session.SetVariables()\n\n                Page.Redirect(sUrl)\n\n            Else\n\n                AddErrorsToPage(_oValidationResults)\n\n                SetupPagePresentation()\n\n                _oValidationResults.ClearAllErrors()\n\n                _oCOData.SetSession()\n\n                _oLobData.SetSession()\n\n            End If\n\n",
    "S122": "            Dim currentKey As String = String.Empty\n\n",
    "S123": "            Dim sUrl As String = String.Empty\n\n",
    "G137": "            _oCOData = New BusinessServices.LobCO.PolicyData(_sQtPolNum, _sInstanceId, BasePolicyData.LoadType.Session)\n\n            _oLobData = New BusinessServices.LobPF.PolicyData(_sQtPolNum, _sInstanceId, BasePolicyData.LoadType.Session)\n\n",
    "S124": "            Dim saveDataSuccess As Boolean = SaveData()\n\n",
    "G138": "            If saveDataSuccess AndAlso\n\n            _oLobData.Policy.Input.Fields(PROPERTY_LOCATION_PROMETRIX_INDICATOR).Value.CL_EqualsYesAbbreviation AndAlso\n\n            _oLobLoc.Input.Fields(LOCATION_PROMETRIX_STATUS).Value.Trim.Equals(PROMETRIX_DOWNTIME) = False Then\n\n                SetProMetrixStatus()\n\n                If saveDataSuccess AndAlso\n\n               _oLobData.Policy.Input.Fields(PROPERTY_LOCATION_PROMETRIX_INDICATOR).Value.CL_EqualsYesAbbreviation AndAlso\n\n               _oLobLoc.Input.Fields(LOCATION_PROMETRIX_STATUS).Value.Trim.Equals(PROMETRIX_DOWNTIME) = False Then\n\n                    sUrl = Me.PreviousPageURL\n\n",
    "S125": "                    Dim sProMetrix As sProMetrixReturn = _oLobBusShared.ProMetrixApplicable(_oLobLoc, _oLobData, _oCOData, _oValidationResults, String.Empty, sUrl, 2)\n\n",
    "G139": "                    If sProMetrix.ReturnProMetrix = ProMetrixReturn.Failure Then\n\n                        saveDataSuccess = False\n\n                    ElseIf sProMetrix.ReturnProMetrix = ProMetrixReturn.Schedule Then\n\n                        _oCOData.Commit()\n\n                        _oLobData.Commit()\n\n                        Redirect(sProMetrix.EditURL)\n\n                    End If\n\n                End If\n\n            End If\n\n            If saveDataSuccess Then\n  'Commit is in SaveData\n\n                SetNavigationPageStatusComplete(currentKey)\n\n                _oLobData.Attributes.Common.WalkThruStartPage = String.Empty\n\n                If _oLobLoc.Input.Fields(LOCATION_PROMETRIX_STATUS).Value.Trim.Equals(PROMETRIX_DOWNTIME) Then\n\n                    _oLobLoc.Input.Fields(LOCATION_PROMETRIX_STATUS).Value = String.Empty\n\n                End If\n\n                AssignDmPrefillPrometrixFields()\n\n                _oLobData.Commit()\n\n                _oCOData.Commit()\n\n                Page.Redirect(Me.PreviousPageURL)\n\n            Else\n\n                AddErrorsToPage(_oValidationResults)\n\n                SetupPagePresentation()\n\n                _oValidationResults.ClearAllErrors()\n\n                _oCOData.SetSession()\n\n                _oLobData.SetSession()\n\n            End If\n\n",
    "G140": "            _oCOData = New BusinessServices.LobCO.PolicyData(_sQtPolNum, _sInstanceId, BasePolicyData.LoadType.Session)\n\n            _oLobData = New BusinessServices.LobPF.PolicyData(_sQtPolNum, _sInstanceId, BasePolicyData.LoadType.Session)\n\n            With _oLobData\n\n                .Attributes(IS_ACORD_IMPORT_WALKTHRU_RUNNING) = Status.NO_ABBREVIATED\n\n                .Attributes(IS_ACORD_IMPORT_WALKTHRU_POSTPONDED) = Status.YES_ABBREVIATED\n\n                .Commit()\n\n            End With\n\n            With _oCOData\n\n                .StatusRecords(String.Concat(LobCO.Shared.Constants.STATUS, getLineOfBusiness([Property]))).Fields(PROPERTY_ACORD_IMPORT_WALKTHRU_STATUS_LOB).Value = ACORD_IMPORT_WALKTHRU_ATTEMPTED\n\n                .Commit()\n\n            End With\n\n            Page.Redirect(PROPERTY_POLICY_SUMMARY)\n\n",
    "S126": "            Dim redirectionURL As String = String.Empty\n\n",
    "S127": "            Dim locationKey As String = String.Empty\n\n",
    "G141": "            _oCOData = New BusinessServices.LobCO.PolicyData(_sQtPolNum, _sInstanceId, BasePolicyData.LoadType.Session)\n\n            _oLobData = New BusinessServices.LobPF.PolicyData(_sQtPolNum, _sInstanceId, BasePolicyData.LoadType.Session)\n\n",
    "S128": "            Dim saveDataSuccess As Boolean = SaveData()\n\n",
    "S129": "            Dim isPrometrixSelected As Boolean = _oLobData.Policy.Input.Fields(PROPERTY_LOCATION_PROMETRIX_INDICATOR).Value.CL_EqualsYesAbbreviation AndAlso\n\n",
    "G142": "                                            (_oLobLoc.Input.Fields(LOCATION_PROMETRIX_STATUS).Value.Trim.Equals(PROMETRIX_DOWNTIME) = False)\n\n            If saveDataSuccess AndAlso isPrometrixSelected Then\n\n                SetNavigationPageStatusComplete(locationKey)\n\n                redirectionURL = getNextCoverageURL(locationKey)\n\n",
    "S130": "                Dim ProMetrix As sProMetrixReturn = _oLobBusShared.ProMetrixApplicable(_oLobLoc, _oLobData, _oCOData, _oValidationResults, String.Empty, redirectionURL, 2)\n\n",
    "G143": "                If ProMetrix.ReturnProMetrix.Equals(ProMetrixReturn.Failure) Then\n\n                    saveDataSuccess = False\n\n                ElseIf ProMetrix.ReturnProMetrix.Equals(ProMetrixReturn.Schedule) Then\n\n                    _oCOData.Commit()\n\n                    _oLobData.Commit()\n\n                    Redirect(ProMetrix.EditURL)\n\n                End If\n\n            End If\n\n            If saveDataSuccess Then\n\n                With _oLobData\n\n                    dNavDict = CType(.Attributes.Collections(LOB_NAVIGATION), Dictionary(Of String, String))\n\n                    locationKey = String.Empty\n\n                    SetNavigationPageStatusComplete(locationKey)\n\n                    AssignDmPrefillPrometrixFields()\n\n                    .Attributes.Common.WalkThruStartPage = String.Empty\n\n                    If _oLobLoc.Input.Fields(LOCATION_PROMETRIX_STATUS).Value.Trim.Equals(PROMETRIX_DOWNTIME) Then\n_oLobLoc.Input.Fields(LOCATION_PROMETRIX_STATUS).Value = String.Empty\n\n\n End If\n\n",
    "S131": "                    Dim LobStatusRecord As LobCO.StatusRecord = _oCOData.StatusRecords(String.Concat(LobCO.Shared.Constants.STATUS, getLineOfBusiness([Property])))\n\n",
    "G144": "                    If LobStatusRecord(PROPERTY_ACORD_IMPORT_SOURCE_LOB).Value.Equals(ACORD_SOURCE) AndAlso\n\n                        LobStatusRecord(PROPERTY_ACORD_IMPORT_WALKTHRU_STATUS_LOB).Value.Equals(STATUS_COMPLETED) = False AndAlso\n\n                         .Attributes(IS_ACORD_IMPORT_WALKTHRU_RUNNING).CL_EqualsYesAbbreviation Then\n\n                        LobStatusRecord(PROPERTY_ACORD_IMPORT_WALKTHRU_LEVEL_LOB).Value = PROPERTY_ACORD_IMPORT_WALKTHRU_LEVEL_LOCATION\n\n                        LobStatusRecord(PROPERTY_ACORD_IMPORT_WALKTHRU_STATUS_LOB).Value = ACORD_IMPORT_WALKTHRU_ATTEMPTED\n\n                        .Attributes(IS_ACORD_IMPORT_WALKTHRU_RUNNING) = Status.NO_ABBREVIATED\n\n                        .Attributes(IS_ACORD_IMPORT_WALKTHRU_POSTPONDED) = Status.YES_ABBREVIATED\n\n                        SetACORDImportWalkthruStatus(locationKey, LobStatusRecord)\n\n                    End If\n\n                    .Commit()\n\n                    _oCOData.Commit()\n\n                    Redirect(PROPERTY_POLICY_SUMMARY)\n\n                End With\n\n            Else\n\n                AddErrorsToPage(_oValidationResults)\n\n                SetupPagePresentation()\n\n                _oValidationResults.ClearAllErrors()\n\n                _oCOData.SetSession()\n\n                _oLobData.SetSession()\n\n            End If\n\n",
    "S132": "            Dim redirectionURL As String = String.Empty\n\n",
    "S133": "            Dim locationKey As String = String.Empty\n\n",
    "G145": "            _oCOData = New BusinessServices.LobCO.PolicyData(_sQtPolNum, _sInstanceId, BasePolicyData.LoadType.Session)\n\n            _oLobData = New BusinessServices.LobPF.PolicyData(_sQtPolNum, _sInstanceId, BasePolicyData.LoadType.Session)\n\n",
    "S134": "            Dim saveDataSuccess As Boolean = SaveData()\n\n",
    "S135": "            Dim isPrometrixSelected As Boolean = _oLobData.Policy.Input.Fields(PROPERTY_LOCATION_PROMETRIX_INDICATOR).Value.CL_EqualsYesAbbreviation AndAlso\n\n",
    "G146": "                                            (_oLobLoc.Input.Fields(LOCATION_PROMETRIX_STATUS).Value.Trim.Equals(PROMETRIX_DOWNTIME) = False)\n\n            If saveDataSuccess AndAlso isPrometrixSelected Then\n\n                SetNavigationPageStatusComplete(locationKey)\n\n                redirectionURL = getNextCoverageURL(locationKey)\n\n",
    "S136": "                Dim ProMetrix As sProMetrixReturn = _oLobBusShared.ProMetrixApplicable(_oLobLoc, _oLobData, _oCOData, _oValidationResults, String.Empty, redirectionURL, 2)\n\n",
    "G147": "                If ProMetrix.ReturnProMetrix.Equals(ProMetrixReturn.Failure) Then\n\n                    saveDataSuccess = False\n\n                ElseIf ProMetrix.ReturnProMetrix.Equals(ProMetrixReturn.Schedule) Then\n\n                    _oCOData.Commit()\n\n                    _oLobData.Commit()\n\n                    Redirect(ProMetrix.EditURL)\n\n                End If\n\n            End If\n\n            If saveDataSuccess Then\n\n                dNavDict = CType(_oLobData.Attributes.Collections(LOB_NAVIGATION), Dictionary(Of String, String))\n\n                locationKey = String.Empty\n\n                SetNavigationPageStatusComplete(locationKey)\n\n                AssignDmPrefillPrometrixFields()\n\n                redirectionURL = getNextCoverageURL(locationKey)\n\n                _oLobData.Attributes.Common.WalkThruStartPage = String.Empty\n\n                If _oLobLoc.Input.Fields(LOCATION_PROMETRIX_STATUS).Value.Trim.Equals(PROMETRIX_DOWNTIME) Then\n_oLobLoc.Input.Fields(LOCATION_PROMETRIX_STATUS).Value = String.Empty\n\n\n End If\n\n",
    "S137": "                Dim LobStatusRecord As LobCO.StatusRecord = _oCOData.StatusRecords(String.Concat(LobCO.Shared.Constants.STATUS, getLineOfBusiness([Property])))\n\n",
    "G148": "                If LobStatusRecord(PROPERTY_ACORD_IMPORT_SOURCE_LOB).Value.Equals(ACORD_SOURCE) AndAlso\n\n                    LobStatusRecord(PROPERTY_ACORD_IMPORT_WALKTHRU_STATUS_LOB).Value.Equals(STATUS_COMPLETED) = False AndAlso\n\n                     _oLobData.Attributes(IS_ACORD_IMPORT_WALKTHRU_RUNNING).CL_EqualsYesAbbreviation Then\n\n                    LobStatusRecord(PROPERTY_ACORD_IMPORT_WALKTHRU_LEVEL_LOB).Value = PROPERTY_ACORD_IMPORT_WALKTHRU_LEVEL_LOCATION\n\n                    SetACORDImportWalkthruStatus(locationKey, LobStatusRecord)\n\n                End If\n\n                _oLobData.Commit()\n\n                _oCOData.Commit()\n\n                Redirect(redirectionURL)\n\n            Else\n\n                AddErrorsToPage(_oValidationResults)\n\n                SetupPagePresentation()\n\n                _oValidationResults.ClearAllErrors()\n\n                _oCOData.SetSession()\n\n                _oLobData.SetSession()\n\n            End If\n\n",
    "S138": "            Dim coverageLevel As String = locationKey.CL_Mid(1, 2)\n\n",
    "S139": "            Dim coverage As String = locationKey.CL_Mid(11, 4)\n\n",
    "G149": "            With _oLobLoc.Input\n\n                Select Case coverageLevel\n\n                    Case PROPERTY_ELIGIBILITY_QUESTION_LEVEL\n\n                        LobStatusRecord(PROPERTY_ACORD_IMPORT_WALKTHRU_LEVEL_LOB).Value = PROPERTY_ACORD_IMPORT_WALKTHRU_LEVEL_ELIGIBILITY\n\n                        .Fields(PROPERTY_ACORD_IMPORT_WALKTRHU_LOCATION_STATUS).Value = STATUS_COMPLETED\n\n                        .Fields(PROPERTY_ACORD_IMPORT_WALKTRHU_LOCATION_LEVEL).Value = PROPERTY_ACORD_WALKTHRU_COMPLETE\n\n                    Case LOCATION_ADDED\n\n                        .Fields(PROPERTY_ACORD_IMPORT_WALKTRHU_LOCATION_LEVEL).Value = coverage\n\n                    Case LOCATION_LOB_CODES\n\n                        .Fields(PROPERTY_ACORD_IMPORT_WALKTRHU_LOCATION_STATUS).Value = STATUS_COMPLETED\n\n                        .Fields(PROPERTY_ACORD_IMPORT_WALKTRHU_LOCATION_LEVEL).Value = PROPERTY_ACORD_WALKTHRU_COMPLETE\n\n                End Select\n\n            End With\n\n",
    "S140": "            Dim locationLevel As String = locationKey.CL_Mid(1, 2)\n\n",
    "S141": "            Dim locationState As String = locationKey.CL_Mid(3, 2)\n\n",
    "S142": "            Dim locationNumber As String = locationKey.CL_Mid(5, 3)\n\n",
    "S143": "            Dim buildingNumber As String = locationKey.CL_Mid(8, 3)\n\n",
    "S144": "            Dim redirectionURL As String = String.Empty\n\n",
    "S145": "            Dim buildingURL As String = String.Concat(\"?LocState=\", locationState, \"&LocNum=\", locationNumber, \"&BldgNum=\", buildingNumber)\n\n",
    "G150": "            If locationLevel.Equals(LOCATION_LOB_CODES) Then\n\n                redirectionURL = String.Concat(PROPERTY_LOCATION_INPUT, buildingURL)\n\n            End If\n\n            If locationLevel.Equals(PROPERTY_ELIGIBILITY_QUESTION_LEVEL) Then\n\n                redirectionURL = PROPERTY_ELIGIBILITY_QUESTIONS\n\n            End If\n\n            If locationLevel.Equals(LOCATION_ADDED) Then\n\n",
    "S146": "                Dim coverageName As String = locationKey.CL_Mid(11, 4)\n\n",
    "G151": "                redirectionURL = LobPF.PFShared.GotoCoverageScreen(coverageName, _oLobData)\n\n            End If\n\n            Return redirectionURL\n\n",
    "S147": "            Dim prometrixFields As New HashSet(Of String) From {{LOCATION_PROMETRIX_STATUS}, {FIELD_PFPMLINENUMBER}, {FIELD_PFPMRISKID},\n\n",
    "G152": "                                                                                         {FIELD_RISKBLDGIND}, {FIELD_RISKEXTLOCKEY}, {FIELD_PFPMMATCHTYPE}}\n\n            For Each prometrixfield As String In prometrixFields\n\n                _oLobLoc.Input.Fields(prometrixfield).Value = String.Empty\n\n            Next\n\n",
    "S148": "            Dim currentKey As String = String.Empty\n\n",
    "S149": "            Dim redirectionUrl As String = String.Empty\n\n",
    "G153": "            _oCOData = New BusinessServices.LobCO.PolicyData(_sQtPolNum, _sInstanceId, BasePolicyData.LoadType.Session)\n\n            _oLobData = New BusinessServices.LobPF.PolicyData(_sQtPolNum, _sInstanceId, BasePolicyData.LoadType.Session)\n\n",
    "S150": "            Dim saveDataSuccess As Boolean = SaveData()\n\n",
    "G154": "            If saveDataSuccess AndAlso _oLobData.Policy.Input.Fields(PROPERTY_LOCATION_PROMETRIX_INDICATOR).Value.CL_EqualsYesAbbreviation AndAlso\n\n                _oLobLoc.Input.Fields(LOCATION_PROMETRIX_STATUS).Value.Trim.Equals(PROMETRIX_DOWNTIME).Equals(False) Then\n\n                SetProMetrixStatus()\n\n                redirectionUrl = Item.NavigateURL\n\n",
    "S151": "                Dim ProMetrix As sProMetrixReturn = _oLobBusShared.ProMetrixApplicable(_oLobLoc, _oLobData, _oCOData, _oValidationResults, String.Empty, redirectionUrl, 2)\n\n",
    "G155": "                If ProMetrix.ReturnProMetrix.Equals(ProMetrixReturn.Failure) Then\n\n                    saveDataSuccess = False\n\n                ElseIf ProMetrix.ReturnProMetrix.Equals(ProMetrixReturn.Schedule) Then\n\n                    _oCOData.Commit()\n\n                    _oLobData.Commit()\n\n                    Redirect(ProMetrix.EditURL)\n\n                End If\n\n            End If\n\n            If saveDataSuccess Then\n\n                SetNavigationPageStatusComplete(currentKey)\n\n                _oLobData.Attributes.Common.WalkThruStartPage = String.Empty\n\n                If _oLobLoc.Input.Fields(LOCATION_PROMETRIX_STATUS).Value.Trim.Equals(PROMETRIX_DOWNTIME) Then\n_oLobLoc.Input.Fields(LOCATION_PROMETRIX_STATUS).Value = String.Empty\n\n\n End If\n\n                SetACORDImpAttributes(_oLobData.Attributes)\n\n                 AssignDmPrefillPrometrixFields()\n\n                _oLobData.Attributes.Collections(LOB_NAVIGATION) = Nothing\n\n                _oLobData.Commit()\n\n                _oCOData.Commit()\n\n                Page.Redirect(Item.NavigateURL)\n\n            Else\n\n                AddErrorsToPage(_oValidationResults)\n\n                SetupPagePresentation()\n\n                _oValidationResults.ClearAllErrors()\n\n                _oCOData.SetSession()\n\n                _oLobData.SetSession()\n\n            End If\n\n"
}['G1', 'S1', 'G2', 'S2', 'S3', 'S4', 'S5', 'G3', 'S6', 'S7', 'G4', 'S8', 'G5', 'S9', 'S10', 'S11', 'G6', 'G7', 'S12', 'G8', 'S13', 'S14', 'G9', 'G10', 'S15', 'G11', 'G12', 'S16', 'G13', 'G14', 'G15', 'G16', 'S17', 'G17', 'G18', 'G19', 'S18', 'G20', 'G21', 'S19', 'G22', 'S20', 'S21', 'G23', 'G24', 'S22', 'G25', 'G26', 'S23', 'S24', 'S25', 'S26', 'G27', 'G28', 'S27', 'S28', 'G29', 'G30', 'G31', 'S29', 'G32', 'G33', 'G34', 'G35', 'S30', 'G36', 'G37', 'G38', 'G39', 'G40', 'G41', 'G42', 'G43', 'G44', 'S31', 'G45', 'G46', 'G47', 'S32', 'G48', 'G49', 'G50', 'S33', 'G51', 'S34', 'G52', 'S35', 'G53', 'G54', 'S36', 'G55', 'S37', 'G56', 'S38', 'G57', 'G58', 'S39', 'S40', 'S41', 'G59', 'G60', 'S42', 'G61', 'S43', 'G62', 'G63', 'G64', 'G65', 'G66', 'S44', 'S45', 'G67', 'S46', 'S47', 'S48', 'S49', 'G68', 'S50', 'G69', 'S51', 'G70', 'S52', 'G71', 'S53', 'G72', 'S54', 'G73', 'G74', 'G75', 'S55', 'G76', 'G77', 'S56', 'G78', 'G79', 'S57', 'G80', 'S58', 'S59', 'G81', 'G82', 'S60', 'S61', 'G83', 'S62', 'S63', 'G84', 'S64', 'G85', 'S65', 'G86', 'S66', 'S67', 'G87', 'S68', 'S69', 'G88', 'S70', 'G89', 'G90', 'G91', 'S71', 'S72', 'G92', 'S73', 'S74', 'S75', 'G93', 'S76', 'G94', 'S77', 'S78', 'S79', 'G95', 'G96', 'S80', 'S81', 'S82', 'S83', 'G97', 'S84', 'G98', 'S85', 'S86', 'S87', 'G99', 'S88', 'G100', 'S89', 'S90', 'G101', 'G102', 'G103', 'G104', 'S91', 'G105', 'G106', 'S92', 'G107', 'G108', 'S93', 'G109', 'G110', 'S94', 'G111', 'G112', 'S95', 'G113', 'G114', 'S96', 'G115', 'G116', 'S97', 'G117', 'S98', 'G118', 'S99', 'G119', 'G120', 'S100', 'S101', 'S102', 'G121', 'G122', 'G123', 'S103', 'G124', 'S104', 'G125', 'G126', 'S105', 'S106', 'G127', 'S107', 'G128', 'S108', 'G129', 'S109', 'S110', 'G130', 'S111', 'G131', 'S112', 'G132', 'S113', 'S114', 'S115', 'S116', 'S117', 'G133', 'S118', 'G134', 'S119', 'S120', 'G135', 'S121', 'G136', 'S122', 'S123', 'G137', 'S124', 'G138', 'S125', 'G139', 'G140', 'S126', 'S127', 'G141', 'S128', 'S129', 'G142', 'S130', 'G143', 'S131', 'G144', 'S132', 'S133', 'G145', 'S134', 'S135', 'G146', 'S136', 'G147', 'S137', 'G148', 'S138', 'S139', 'G149', 'S140', 'S141', 'S142', 'S143', 'S144', 'S145', 'G150', 'S146', 'G151', 'S147', 'G152', 'S148', 'S149', 'G153', 'S150', 'G154', 'S151', 'G155']